{
    "id": 4047552097,
    "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQwNDc1NTIwOTc=",
    "url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/events/4047552097",
    "actor": {
      "login": "q9f",
      "id": 58883403,
      "node_id": "MDQ6VXNlcjU4ODgzNDAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/58883403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/q9f",
      "html_url": "https://github.com/q9f",
      "followers_url": "https://api.github.com/users/q9f/followers",
      "following_url": "https://api.github.com/users/q9f/following{/other_user}",
      "gists_url": "https://api.github.com/users/q9f/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/q9f/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/q9f/subscriptions",
      "organizations_url": "https://api.github.com/users/q9f/orgs",
      "repos_url": "https://api.github.com/users/q9f/repos",
      "events_url": "https://api.github.com/users/q9f/events{/privacy}",
      "received_events_url": "https://api.github.com/users/q9f/received_events",
      "type": "User",
      "site_admin": false
    },
    "event": "subscribed",
    "commit_id": null,
    "commit_url": null,
    "created_at": "2020-11-28T01:25:21Z",
    "issue": {
      "url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/394",
      "repository_url": "https://api.github.com/repos/ethereumclassic/ECIPs",
      "labels_url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/394/labels{/name}",
      "comments_url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/394/comments",
      "events_url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/394/events",
      "html_url": "https://github.com/ethereumclassic/ECIPs/issues/394",
      "id": 747057269,
      "node_id": "MDU6SXNzdWU3NDcwNTcyNjk=",
      "number": 394,
      "title": "Change the ETC Proof of Work Algorithm to Keccak-256",
      "user": {
        "login": "antsankov",
        "id": 2533512,
        "node_id": "MDQ6VXNlcjI1MzM1MTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2533512?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/antsankov",
        "html_url": "https://github.com/antsankov",
        "followers_url": "https://api.github.com/users/antsankov/followers",
        "following_url": "https://api.github.com/users/antsankov/following{/other_user}",
        "gists_url": "https://api.github.com/users/antsankov/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/antsankov/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/antsankov/subscriptions",
        "organizations_url": "https://api.github.com/users/antsankov/orgs",
        "repos_url": "https://api.github.com/users/antsankov/repos",
        "events_url": "https://api.github.com/users/antsankov/events{/privacy}",
        "received_events_url": "https://api.github.com/users/antsankov/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 17,
      "created_at": "2020-11-20T01:10:19Z",
      "updated_at": "2021-06-15T05:51:15Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "---\r\nlang: en\r\necip: 1049\r\ntitle: Change the ETC Proof of Work Algorithm to Keccak-256\r\nauthor: Alexander Tsankov (alexander.tsankov@colorado.edu)\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory: core\r\ndiscussions-to: https://github.com/ethereumclassic/ECIPs/issues/394\r\ncreated: 2019-01-08\r\nredrafted: 2020-11-19\r\nlicense: Apache-2.0\r\n---\r\n# Change the ETC Proof of Work Algorithm to Keccak-256\r\n\r\n> This is a redraft, which means the original V1 of this proposal was not able to reach critical consensus while in Last Call. For more information, see [here](https://github.com/ethereumclassic/ECIPs#process-overview).\r\n\r\n## Abstract\r\n\r\nA proposal to replace the current Ethereum Classic proof of work algorithm with EVM-standard Keccak-256  (\"ketch-ak\").\r\n \r\n## Specification \r\n\r\n- Replace the use of Ethash with Keccak256 to hash block headers and generate the `mixHash`.\r\n- The current outer-level Keccak256 hash of `mixHash` and `nonce`, remains unchanged.\r\n- The switchover takes place on XXX block, with a fallback block of YYY.\r\n\r\n```\r\nNEW PoW:  keccak256(keccak256(rlp(unsealed header)), nonce) <= 2^256 / difficulty\r\nOLD PoW:  keccak256(ethash(rlp(unsealed header)), nonce) <= 2^256 / difficulty\r\n```\r\n\r\nThe reference hash of string \"ETC\" in EVM Keccak-256 is:\r\n `49b019f3320b92b2244c14d064de7e7b09dbc4c649e8650e7aa17e5ce7253294`\r\n\r\nFor the official miner Keccak256 test vector, see Appendix. \r\n\r\n## Motivation\r\n\r\n* A response to the recent (6+, as of 2021) double-spend attacks against Ethereum Classic. Most of this hashpower was rented or came from other chains, specifically Ethereum (ETH). A separate proof of work algorithm would encourage the development of a specialized Ethereum Classic mining community, and blunt the ability for attackers to purchase mercenary hash power on the open-market. \r\n\r\n* As a secondary benefit, deployed smart contracts and dapps running on chain are currently able to use `keccak256()` in their code. This ECIP could open the possibility of smart contracts being able to evaluate chain state, and simplify second layer (L2) development. We recommend an op-cod / pre-compile be implemented in Solidity to facilitate this. \r\n\r\n* Ease of use in consumer processors. Keccak-256 is far more efficient per unit of hash than Ethash is. It requires very little memory and power consumption which aids in deployment on IoT devices.\r\n\r\n## Rationale\r\n\r\n### Reason 1: Similarity to Bitcoin\r\nThe Bitcoin network currently uses the CPU-intensive SHA256 Algorithm to evaluate blocks. When Ethereum was deployed it used a different algorithm, Dagger-Hashimoto, which eventually became Ethash on 1.0 launch. Dagger-Hashimoto was explicitly designed to be memory-intensive with the goal of ASIC resistance [1]. It has been provably unsuccessful at this goal, with Ethash ASICs currently easily available on the market.\r\n\r\nKeccak-256 is the product of decades of research and the winner of a multi-year contest held by NIST that has rigorously verified its robustness and quality as a hashing algorithm. It is one of the only hashing algorithms besides SHA2-256 that is allowed for military and scientific-grade applications, and can provide sufficient hashing entropy for a proof of work system. This algorithm would position Ethereum Classic at an advantage in mission-critical blockchain applications that are required to use provably high-strength algorithms. [2]\r\n\r\nA CPU-intensive algorithm like Keccak256 would allow both the uniqueness of a fresh PoW algorithm that has not had ASICs developed against it, while at the same time allowing for organic optimization of a dedicated and financially committed miner base, much the way Bitcoin did with its own SHA2 algorithm. The image below shows the excellent performance profile of Keccak in FPGAs:\r\n\r\n![image](https://user-images.githubusercontent.com/2533512/109317514-042d0f00-780a-11eb-9f5b-345199c0583d.png)\r\n\r\nIf Ethereum Classic is to succeed as a project, we need to take what we have learned from Bitcoin and move towards CPU-hard PoW algorithms.\r\n\r\n> At first, most users would run network nodes, but as the network grows beyond a certain point, it would be left more and more to specialists with server farms of specialized hardware. - Satoshi Nakamoto (2008-11-03) [3]\r\n\r\nHere is an analysis of Monero's nonce-distribution for \"cryptonight\", an algorithm similar to Ethash, which also attempts to be ASIC-Resistant it is very clear in the picture that before the hashing algorithm is changed there is a clear nonce-pattern. This is indicative of ASICs being found and showing a failure state of an ASIC resistant alogrithm.\r\n\r\n![example](https://i.imgur.com/vVdmzm9.jpg)\r\n\r\n### Reason 2: Value to Smart Contract Developers\r\nIn Solidity, developers have access to the `keccak256()` function, which allows a smart contract to efficiently calculate the hash of a given input. This has been used in a number of interesting projects launched on both Ethereum and Ethereum-Classic. Most Specifically a project called 0xBitcoin [4] - which the ERC-918 spec was based on.\r\n\r\n0xBitcoin is a security-audited [5] dapp that allows users to submit a proof of work hash directly to a smart contract running on the Ethereum blockchain. If the sent hash matches the given requirements, a token reward is trustlessly dispensed to the sender, along with the contract reevaluating difficulty parameters. This project has run successfully for over 10 months, and has minted over 3 million tokens [6].\r\n\r\nWith the direction that Ethereum Classic is taking: a focus on Layer-2 solutions and cross-chain compatibility; being able to evaluate proof of work on chain, will be tremendously valuable to developers of both smart-contracts and node software writers. This could greatly simplify cross-chain interoperability. \r\n\r\nExample of a Smart contract hashing being able to trustlessly Keccak-256 hash a hypothetical block header.\r\n![example](https://i.imgur.com/xh3WgCF.png)\r\n\r\n## Implementation\r\n\r\nA testnet implementing this ECIP, is currently live, with more information available at [Astor.host](https://astor.host)\r\n\r\n* Java Node Implementation (HyperLedger Besu). Supports Stratum mining. Located [here](https://github.com/hyperledger/besu/)\r\n* Keccak-256 CPU Miner. Located [here](https://github.com/snissn/ethereum-cpu-miner)\r\n* Official Keccak Team Implementation Document for Hardware and Software. Located [here](https://keccak.team/obsolete/Keccak-implementation-3.1.pdf)\r\n* TODO Block Explorer. Located [here](https://explore.astor.host/)\r\n* TODO Live Network Stats. Located [here](https://stats.astor.host/)\r\n\r\n### References: \r\n\r\n1. https://github.com/ethereum/wiki/wiki/Dagger-Hashimoto#introduction\r\n1. https://en.wikipedia.org/wiki/SHA-3\r\n1. https://satoshi.nakamotoinstitute.org/emails/cryptography/2/\r\n1. https://github.com/0xbitcoin/white-paper\r\n1. https://github.com/EthereumCommonwealth/Auditing/issues/102\r\n1. https://etherscan.io/address/0xb6ed7644c69416d67b522e20bc294a9a9b405b31\r\n\r\n### Appendix \r\n\r\nMiner Keccak-256 Test Vector\r\n```\r\nnonce: 0x0000000000000038\r\nmixhash (AKA mining hash): 0xec1e0af050c8c5b9e2b59c65da7d9dd62eaf5a17f9ff6a91da60858a0233e444\r\nOuter Keccak Input (mixhash + nonce): 0xec1e0af050c8c5b9e2b59c65da7d9dd62eaf5a17f9ff6a91da60858a0233e4440000000000000038\r\nKeccak Result Hash: 0x0116ad248e0dc3f7f843f73a62803c5f6b7c0427700b70c8b1aab39db404089f\r\nResult Hash (int):492378471644473844779041230572681759021515627522456897855697138922293561503\r\nDifficulty (int):1157920892373161954235709850086879078532699846656405640394575840079131296399\r\nDifference (hash - diff): -665542420728688109456668619514197319511184219133948742538878701156837734896\r\n```\r\nTo verify the Result Hash, with make sure to use hex mode.\r\n<img width=\"450\" alt=\"Screen Shot 2021-02-23 at 20 33 57\" src=\"https://user-images.githubusercontent.com/2533512/108943782-af757280-7616-11eb-8a8e-986431ef2a6d.png\">\r\n\r\n",
      "performed_via_github_app": null
    },
    "performed_via_github_app": null
  }