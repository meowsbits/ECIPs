{
    "id": 2749622192,
    "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3NDk2MjIxOTI=",
    "url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/events/2749622192",
    "actor": {
      "login": "zmitton",
      "id": 6954889,
      "node_id": "MDQ6VXNlcjY5NTQ4ODk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6954889?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zmitton",
      "html_url": "https://github.com/zmitton",
      "followers_url": "https://api.github.com/users/zmitton/followers",
      "following_url": "https://api.github.com/users/zmitton/following{/other_user}",
      "gists_url": "https://api.github.com/users/zmitton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zmitton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zmitton/subscriptions",
      "organizations_url": "https://api.github.com/users/zmitton/orgs",
      "repos_url": "https://api.github.com/users/zmitton/repos",
      "events_url": "https://api.github.com/users/zmitton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zmitton/received_events",
      "type": "User",
      "site_admin": false
    },
    "event": "subscribed",
    "commit_id": null,
    "commit_url": null,
    "created_at": "2019-10-28T18:32:35Z",
    "issue": {
      "url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/13",
      "repository_url": "https://api.github.com/repos/ethereumclassic/ECIPs",
      "labels_url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/13/labels{/name}",
      "comments_url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/13/comments",
      "events_url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/13/events",
      "html_url": "https://github.com/ethereumclassic/ECIPs/issues/13",
      "id": 399916230,
      "node_id": "MDU6SXNzdWUzOTk5MTYyMzA=",
      "number": 13,
      "title": "ECIP-1049: Change the ETC Proof of Work Algorithm to Keccak-256",
      "user": {
        "login": "p3c-bot",
        "id": 40745785,
        "node_id": "MDQ6VXNlcjQwNzQ1Nzg1",
        "avatar_url": "https://avatars1.githubusercontent.com/u/40745785?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/p3c-bot",
        "html_url": "https://github.com/p3c-bot",
        "followers_url": "https://api.github.com/users/p3c-bot/followers",
        "following_url": "https://api.github.com/users/p3c-bot/following{/other_user}",
        "gists_url": "https://api.github.com/users/p3c-bot/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/p3c-bot/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/p3c-bot/subscriptions",
        "organizations_url": "https://api.github.com/users/p3c-bot/orgs",
        "repos_url": "https://api.github.com/users/p3c-bot/repos",
        "events_url": "https://api.github.com/users/p3c-bot/events{/privacy}",
        "received_events_url": "https://api.github.com/users/p3c-bot/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1702098127,
          "node_id": "MDU6TGFiZWwxNzAyMDk4MTI3",
          "url": "https://api.github.com/repos/ethereumclassic/ECIPs/labels/status:5%20last-call",
          "name": "status:5 last-call",
          "color": "969696",
          "default": false,
          "description": "ECIP has been accepted and is waiting for last-call reviews."
        },
        {
          "id": 1154785127,
          "node_id": "MDU6TGFiZWwxMTU0Nzg1MTI3",
          "url": "https://api.github.com/repos/ethereumclassic/ECIPs/labels/type:%20std-core",
          "name": "type: std-core",
          "color": "fdcdac",
          "default": false,
          "description": "ECIPs of the type \"Core\" - changing the Classic protocol."
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 132,
      "created_at": "2019-01-16T17:27:19Z",
      "updated_at": "2020-11-20T01:14:21Z",
      "closed_at": "2020-11-20T01:14:21Z",
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "---\r\nlang: en\r\necip: 1049\r\ntitle: Change the ETC Proof of Work Algorithm to the Keccak-256\r\nauthor: Alexander Tsankov (alexander.tsankov@colorado.edu)\r\nstatus: LAST CALL\r\ntype: Standards Track\r\ncategory: core\r\ndiscussions-to: https://github.com/ethereumclassic/ECIPs/issues/13\r\ncreated: 2019-01-08\r\nlicense: Apache-2.0\r\n---\r\n# Change the ETC Proof of Work Algorithm to Keccak-256\r\n\r\n## Abstract\r\nA proposal to replace the current Ethereum Classic proof of work algorithm with EVM-standard Keccak-256  (\"ketch-ak\")\r\n\r\nThe reference hash of string \"ETC\" in EVM Keccak-256 is:\r\n\r\n `49b019f3320b92b2244c14d064de7e7b09dbc4c649e8650e7aa17e5ce7253294`\r\n \r\n## Implementation Plan\r\n\r\n* Activation Block: 12,000,000 (approx. 4 months from acceptance - January 2021)\r\n* Fallback Activation Block: 12,500,000 (approx. 7 months from acceptance - April 2021)\r\n* If not activated by Block 12,500,000 this ECIP is voided and moved to `Rejected`. \r\n\r\n* We recommend `difficulty` be multiplied 100 times at the first Keccak-256 block compared to the final Ethash block. This is to compensate for the higher performance of Keccak and to prevent a pileup of orphaned blocks at switchover. This is not required for launch.\r\n\r\n## Motivation\r\n\r\n* A response to the recent double-spend attacks against Ethereum Classic. Most of this hashpower was rented or came from other chains, specifically Ethereum (ETH). A separate proof of work algorithm would encourage the development of a specialized Ethereum Classic mining community, and blunt the ability for attackers to purchase mercenary hash power on the open-market. \r\n\r\n* As a secondary benefit, deployed smart contracts and dapps running on chain are currently able to use `keccak256()` in their code. This ECIP could open the possibility of smart contracts being able to evaluate chain state, and simplify second layer (L2) development. We recommend an op-cod / pre-compile be implemented in Solidity to facilitate this. \r\n\r\n* Ease of use in consumer processors. Keccak-256 is far more efficient per unit of hash than Ethash is. It requires very little memory and power consumption which aids in deployment on IoT devices.\r\n\r\n## Rationale\r\n\r\n### Reason 1: Similarity to Bitcoin\r\nThe Bitcoin network currently uses the CPU-intensive SHA256 Algorithm to evaluate blocks. When Ethereum was deployed it used a different algorithm, Dagger-Hashimoto, which eventually became Ethash on 1.0 launch. Dagger-Hashimoto was explicitly designed to be memory-intensive with the goal of ASIC resistance [1]. It has been provably unsuccessful at this goal, with Ethash ASICs currently easily available on the market.\r\n\r\nKeccak-256 is the product of decades of research and the winner of a multi-year contest held by NIST that has rigorously verified its robustness and quality as a hashing algorithm. It is one of the only hashing algorithms besides SHA2-256 that is allowed for military and scientific-grade applications, and can provide sufficient hashing entropy for a proof of work system. This algorithm would position Ethereum Classic at an advantage in mission-critical blockchain applications that are required to use provably high-strength algorithms. [2]\r\n\r\nA CPU-intensive algorithm like Keccak256 would allow both the uniqueness of a fresh PoW algorithm that has not had ASICs developed against it, while at the same time allowing for organic optimization of a dedicated and financially committed miner base, much the way Bitcoin did with its own SHA2 algorithm.\r\n\r\nIf Ethereum Classic is to succeed as a project, we need to take what we have learned from Bitcoin and move towards CPU-hard PoW algorithms.\r\n\r\n> At first, most users would run network nodes, but as the network grows beyond a certain point, it would be left more and more to specialists with server farms of specialized hardware. - Satoshi Nakamoto (2008-11-03) [3]\r\n\r\n*Note: Please consider this is from 2008, and the Bitcoin community at that time did not differentiate between node operators and miners. I interpret \"network nodes\" in this quote to refer to miners, and \"server farms of specialized hardware\" to refer to mining farms.*\r\n\r\n\r\n### Reason 2: Value to Smart Contract Developers\r\nIn Solidity, developers have access to the `keccak256()` function, which allows a smart contract to efficiently calculate the hash of a given input. This has been used in a number of interesting projects launched on both Ethereum and Ethereum-Classic. Most Specifically a project called 0xBitcoin [4] - which the ERC-918 spec was based on.\r\n\r\n0xBitcoin is a security-audited [5] dapp that allows users to submit a proof of work hash directly to a smart contract running on the Ethereum blockchain. If the sent hash matches the given requirements, a token reward is trustlessly dispensed to the sender, along with the contract reevaluating difficulty parameters. This project has run successfully for over 10 months, and has minted over 3 million tokens [6].\r\n\r\nWith the direction that Ethereum Classic is taking: a focus on Layer-2 solutions and cross-chain compatibility; being able to evaluate proof of work on chain, will be tremendously valuable to developers of both smart-contracts and node software writers. This could greatly simplify interoperability. \r\n\r\n## Implementation\r\n\r\nExample of a Smart contract hashing being able to trustlessly Keccak-256 hash a hypothetical block header.\r\n![example](https://i.imgur.com/xh3WgCF.png)\r\n\r\nHere is an analysis of Monero's nonce-distribution for \"cryptonight\", an algorithm similar to Ethash, which also attempts to be \"ASIC-Resistant\" it is very clear in the picture that before the hashing algorithm is changed there is a clear nonce-pattern. This is indicative of a major failure in a hashing algorithm, and should illustrate the dangers of disregarding proper cryptographic security. Finding a hashing pattern would be far harder using a proven system like Keccak-256:\r\n\r\n![example](https://i.imgur.com/vVdmzm9.jpg)\r\n\r\nBased on analysis of the EVM architecture [here](https://cdn.discordapp.com/attachments/223675625334898688/534597157693685760/eth.jpg) there are two main pieces that need to be changed:\r\n\r\n1. The Proof of work function needs to be replaced with Keccak-256\r\n1. The Function that checks the nonce-header  in the block needs to know to accept Keccak-256 hashes as valid for a block.\r\n\r\n![example](https://i.imgur.com/2hobqOL.png)\r\n\r\nA testnet implementing this ECIP, is currently live, with more information available at [Astor.host](https://astor.host)\r\n\r\n* Official Keccak Team Implementation Document for Hardware and Software. Located [here](https://keccak.team/obsolete/Keccak-implementation-3.1.pdf)\r\n* Node Implementation (based on Parity). Located [here](https://github.com/antsankov/parity-ethereum/tree/sha3)\r\n* Keccak-256 CPU Miner. Located [here](https://github.com/antsankov/ethereum-cpu-miner)\r\n* Block Explorer. Located [here](https://explore.astor.host/)\r\n* Live Network Stats. Located [here](https://stats.astor.host/)\r\n\r\n### References: \r\n\r\n1. https://github.com/ethereum/wiki/wiki/Dagger-Hashimoto#introduction\r\n1. https://en.wikipedia.org/wiki/SHA-3\r\n1. https://satoshi.nakamotoinstitute.org/emails/cryptography/2/\r\n1. https://github.com/0xbitcoin/white-paper\r\n1. https://github.com/EthereumCommonwealth/Auditing/issues/102\r\n1. https://etherscan.io/address/0xb6ed7644c69416d67b522e20bc294a9a9b405b31\r\n\r\n### Previous discussion from [Pull request](https://github.com/ethereumclassic/ECIPs/pull/8)\r\n![example](https://i.imgur.com/09Rtv0V.png)\r\n![example](https://i.imgur.com/1TJtgO7.png)\r\n![example](https://i.imgur.com/TTLZunn.png)\r\n![example](https://i.imgur.com/uOoBFF9.png)\r\n![example](https://i.imgur.com/irYFhRy.png)\r\n![example](https://i.imgur.com/AoChMCy.png)\r\n\r\n\r\n",
      "performed_via_github_app": null
    },
    "performed_via_github_app": null
  }