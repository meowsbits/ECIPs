{
    "id": 486985228,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk4NTIyOA==",
    "url": "https://api.github.com/repos/ethereumclassic/ECIPs/pulls/comments/486985228",
    "pull_request_review_id": 486726713,
    "diff_hunk": "@@ -0,0 +1,194 @@\n+---\n+lang: en\n+ecip: xxxx\n+title: If GPU-friendly Ethash is Removed, Change the ETC Proof of Work Algorithm to CPU-friendly RandomX\n+status: Draft\n+type: Standards Track\n+category: Core\n+discussions-to: https://github.com/ethereumclassic/ECIPs/issues/329\n+author: r0n1n (@gitr0n1n)\n+created: 2020-09-05\n+---\n+\n+### Abstract\n+A proposal to replace Ethereum Classic proof of work algorithm with `CPU-friendly RandomX` should `GPU-friendly Ethash` be rejected from the network.\n+\n+### Motivation\n+I am concerned with the centralized pro-ASIC movement in ECIP-1049 (and ECIP-1095) from a centralized body in ETC (ETC Coop, Commonwealth.gg, and EPIC Blockchain). I believe the self named `SHA3 Coalition` is not fully addressing the many concerns of miners/developers/end users regarding miner centralization, inflation capture, supply chain bottle necks, network security, interoperability with other EVMs, and a deviation from the core principles of Ethereum Classic network. \n+\n+To date there are 27 meaningful unanswered comments written from high profile ETC network developers, large mining pools, small independent miners and independent end users. The champions of ECIP-1049 and ECIP-1095 proposals are not engaging these comments in their ECIP discussion threads. Due to the uncertainty of these unaddressed questions, a material opposition to ECIP-1049 has formed in the Ethereum Classic community.\n+\n+It is my opinion that ECIP-1049, will not achieve the `Rough Consensus` requirement to push SHA3 ASIC on the network and Ethash GPU will likely prevail in that conversation. As an auxiliary path, this ECIP is being proposed to offer an alternative route to `consumer product, decentralized mining` via a CPU route.\n+\n+Should `Ethash` remain as Ethereum Classic's algorithm (ECIP-1043), the RandomX CPU-friendly alogrithm will not be necessary to offer a consumer product decentralized mining path. If the ECIP-1049 proponents are able to usurp Ethash as the algorithm of Ethereum Classic. This ECIP will be championed for consideration of `Last Call` status by myself in a effort to align the mining ecosystem with the principles of the Ethereum Classic network.\n+\n+Thank you for allowing me to engage in the ECIP process. It has been quite the learning curve this week as I am a new ECIP participant.\n+\n+Related:\n+- Do nothing. Stay on Ethash.\n+- ECIP-1043 Ethash GPU. https://github.com/ethereumclassic/ECIPs/issues/11\n+- ECIP-1049 SHA3 ASIC. https://github.com/ethereumclassic/ECIPs/issues/13\n+- ECIP-xxx RandomX CPU. https://github.com/ethereumclassic/ECIPs/issues/329\n+\n+# Specification\n+\n+The proposed solution refers to [RandomX](https://web.getmonero.org/resources/moneropedia/randomx.html). This spec was sourced from the [Monero Community](https://github.com/tevador/RandomX). Thank you to all the wonderful researchers contributing to the goal of ASIC resistant algorithms.\n+\n+# RandomX\n+RandomX is a proof-of-work (PoW) algorithm that is optimized for general-purpose CPUs. RandomX uses random code execution (hence the name) together with several memory-hard techniques to minimize the efficiency advantage of specialized hardware.\n+\n+## Overview\n+\n+RandomX utilizes a virtual machine that executes programs in a special instruction set that consists of integer math, floating point math and branches. These programs can be translated into the CPU's native machine code on the fly (example: [program.asm](https://github.com/tevador/RandomX/blob/master/doc/program.asm)). At the end, the outputs of the executed programs are consolidated into a 256-bit result using a cryptographic hashing function ([Blake2b](https://blake2.net/)).\n+\n+RandomX can operate in two main modes with different memory requirements:\n+\n+* **Fast mode** - requires 2080 MiB of shared memory.\n+* **Light mode** - requires only 256 MiB of shared memory, but runs significantly slower\n+\n+Both modes are interchangeable as they give the same results. The fast mode is suitable for \"mining\", while the light mode is expected to be used only for proof verification.\n+\n+## Documentation\n+\n+Full specification is available in [specs.md](https://github.com/tevador/RandomX/blob/master/doc/specs.md).\n+\n+Design description and analysis is available in [design.md](https://github.com/tevador/RandomX/blob/master/doc/design.md).\n+\n+## Audits\n+\n+Between May and August 2019, RandomX was audited by 4 independent security research teams:\n+\n+* [Trail of Bits](https://www.trailofbits.com/) (28 000 USD)\n+* [X41 D-SEC](https://www.x41-dsec.de/) (42 000 EUR)\n+* [Kudelski Security](https://www.kudelskisecurity.com/) (18 250 CHF)\n+* [QuarksLab](https://quarkslab.com/en/) (52 800 USD)\n+\n+The first audit was generously funded by [Arweave](https://www.arweave.org/), one of the early adopters of RandomX. The remaining three audits were funded by donations from the [Monero community](https://ccs.getmonero.org/proposals/RandomX-audit.html). All four audits were coordinated by [OSTIF](https://ostif.org/).\n+\n+Final reports from all four audits are available in the [audits](https://github.com/tevador/RandomX/blob/master/audits) directory. None of the audits found any critical vulnerabilities, but several changes in the algorithm and the code were made as a direct result of the audits. More details can be found in the [final report by OSTIF](https://ostif.org/four-audits-of-randomx-for-monero-and-arweave-have-been-completed-results/).\n+\n+## Build\n+\n+RandomX is written in C++11 and builds a static library with a C API provided by header file [randomx.h](https://github.com/tevador/RandomX/blob/master/src/randomx.h). Minimal API usage example is provided in [api-example1.c](https://github.com/tevador/RandomX/blob/master/src/tests/api-example1.c). The reference code includes a `randomx-benchmark` and `randomx-tests` executables for testing.\n+\n+### Linux\n+\n+Build dependencies: `cmake` (minimum 2.8.7) and `gcc` (minimum version 4.8, but version 7+ is recommended).\n+\n+To build optimized binaries for your machine, run:\n+```\n+git clone https://github.com/tevador/RandomX.git\n+cd RandomX\n+mkdir build && cd build\n+cmake -DARCH=native ..\n+make\n+```\n+\n+To build portable binaries, omit the `ARCH` option when executing cmake.\n+\n+### Windows\n+\n+On Windows, it is possible to build using MinGW (same procedure as on Linux) or using Visual Studio (solution file is provided).\n+\n+### Precompiled binaries\n+\n+Precompiled `randomx-benchmark` binaries are available on the [Releases page](https://github.com/tevador/RandomX/releases).\n+\n+## Proof of work\n+\n+RandomX was primarily designed as a PoW algorithm for [Monero](https://www.getmonero.org/). The recommended usage is following:\n+\n+* The key `K` is selected to be the hash of a block in the blockchain - this block is called the 'key block'. For optimal mining and verification performance, the key should change every 2048 blocks (~2.8 days) and there should be a delay of 64 blocks (~2 hours) between the key block and the change of the key `K`. This can be achieved by changing the key when `blockHeight % 2048 == 64` and selecting key block such that `keyBlockHeight % 2048 == 0`.\n+* The input `H` is the standard hashing blob with a selected nonce value.\n+\n+RandomX was successfully activated on the Monero network on the 30th November 2019.\n+\n+If you wish to use RandomX as a PoW algorithm for your cryptocurrency, please follow the [configuration guidelines](https://github.com/tevador/RandomX/blob/master/doc/configuration.md).\n+\n+**Note**: To achieve ASIC resistance, the key `K` must change and must not be miner-selectable. We recommend to use blockchain data as the key in a similar way to the Monero example above. If blockchain data cannot be used for some reason, use a predefined sequence of keys.\n+\n+### CPU performance\n+The table below lists the performance of selected CPUs using the optimal number of threads (T) and large pages (if possible), in hashes per second (H/s). \"CNv4\" refers to the CryptoNight variant 4 (CN/R) hashrate measured using [XMRig](https://github.com/xmrig/xmrig) v2.14.1. \"Fast mode\" and \"Light mode\" are the two modes of RandomX.\n+\n+|CPU|RAM|OS|AES|CNv4|Fast mode|Light mode|\n+|---|---|--|---|-----|------|--------------|\n+Intel Core i9-9900K|32G DDR4-3200|Windows 10|hw|660 (8T)|5770 (8T)|1160 (16T)|\n+AMD Ryzen 7 1700|16G DDR4-2666|Ubuntu 16.04|hw|520 (8T)|4100 (8T)|620 (16T)|\n+Intel Core i7-8550U|16G DDR4-2400|Windows 10|hw|200 (4T)|1700  (4T)|350 (8T)|\n+Intel Core i3-3220|4G DDR3-1333|Ubuntu 16.04|soft|42 (4T)|510 (4T)|150 (4T)|\n+Raspberry Pi 3|1G LPDDR2|Ubuntu 16.04|soft|3.5 (4T)|-|20 (4T)|\n+\n+Note that RandomX currently includes a JIT compiler for x86-64 and ARM64. Other architectures have to use the portable interpreter, which is much slower.\n+\n+### GPU performance\n+\n+SChernykh is developing GPU mining code for RandomX. Benchmarks are included in the following repositories:\n+\n+* [CUDA miner](https://github.com/SChernykh/RandomX_CUDA) - NVIDIA GPUs.\n+* [OpenCL miner](https://github.com/SChernykh/RandomX_OpenCL) - only for AMD Vega and AMD Polaris GPUs (uses GCN machine code).\n+\n+The code from the above repositories is included in the open source miner [XMRig](https://github.com/xmrig/xmrig).\n+\n+Note that GPUs are at a disadvantage when running RandomX since the algorithm was designed to be efficient on CPUs.\n+\n+# FAQ\n+\n+### Which CPU is best for mining RandomX?\n+\n+Most Intel and AMD CPUs made since 2011 should be fairly efficient at RandomX. More specifically, efficient mining requires:\n+\n+* 64-bit architecture\n+* IEEE 754 compliant floating point unit\n+* Hardware AES support ([AES-NI](https://en.wikipedia.org/wiki/AES_instruction_set) extension for x86, Cryptography extensions for ARMv8)\n+* 16 KiB of L1 cache, 256 KiB of L2 cache and 2 MiB of L3 cache per mining thread\n+* Support for large memory pages\n+* At least 2.5 GiB of free RAM per NUMA node\n+* Multiple memory channels may be required:\n+    * DDR3 memory is limited to about 1500-2000 H/s per channel (depending on frequency and timings)\n+    * DDR4 memory is limited to about 4000-6000 H/s per channel  (depending on frequency and timings)\n+\n+### Does RandomX facilitate botnets/malware mining or web mining?\n+\n+Due to the way the algorithm works, mining malware is much easier to detect. [RandomX Sniffer](https://github.com/tevador/randomx-sniffer) is a proof of concept tool that can detect illicit mining activity on Windows.\n+\n+Efficient mining requires more than 2 GiB of memory, which also disqualifies many low-end machines such as IoT devices, which are often parts of large botnets.\n+\n+Web mining is infeasible due to the large memory requirement and the lack of directed rounding support for floating point operations in both Javascript and WebAssembly.\n+\n+### Since RandomX uses floating point math, does it give reproducible results on different platforms?\n+\n+RandomX uses only operations that are guaranteed to give correctly rounded results by the [IEEE 754](https://en.wikipedia.org/wiki/IEEE_754) standard: addition, subtraction, multiplication, division and square root. Special care is taken to avoid corner cases such as NaN values or denormals.\n+\n+The reference implementation has been validated on the following platforms:\n+* x86 (32-bit, little-endian)\n+* x86-64 (64-bit, little-endian)\n+* ARMv7+VFPv3 (32-bit, little-endian)\n+* ARMv8 (64-bit, little-endian)\n+* PPC64 (64-bit, big-endian)\n+\n+### Can FPGAs mine RandomX?\n+\n+RandomX generates multiple unique programs for every hash, so FPGAs cannot dynamically reconfigure their circuitry because typical FPGA takes tens of seconds to load a bitstream. It is also not possible to generate bitstreams for RandomX programs in advance due to the sheer number of combinations (there are 2<sup>512</sup> unique programs).\n+\n+Sufficiently large FPGAs can mine RandomX in a [soft microprocessor](https://en.wikipedia.org/wiki/Soft_microprocessor) configuration by emulating a CPU. Under these circumstances, an FPGA will be much less efficient than a CPU or a specialized chip (ASIC).\n+\n+## Acknowledgements\n+* [tevador](https://github.com/tevador) - author\n+* [SChernykh](https://github.com/SChernykh) - contributed significantly to the design of RandomX\n+* [hyc](https://github.com/hyc) - original idea of using random code execution for PoW\n+* [Other contributors](https://github.com/tevador/RandomX/graphs/contributors)\n+\n+RandomX uses some source code from the following 3rd party repositories:\n+* Argon2d, Blake2b hashing functions: https://github.com/P-H-C/phc-winner-argon2\n+\n+The author of RandomX declares no competing financial interest.\n+\n+## Donations\n+\n+If you'd like to use RandomX, please consider donating to help cover the development cost of the algorithm.\n+\n+Author's XMR address:\n+```\n+845xHUh5GvfHwc2R8DVJCE7BT2sd4YEcmjG8GNSdmeNsP5DTEjXd1CNgxTcjHjiFuthRHAoVEJjM7GyKzQKLJtbd56xbh7V\n+```\n+Total donations received: ~3.86 XMR (as of 30th August 2019). Thanks to all contributors.",
    "path": "_specs/ecip-randox-revival.md",
    "position": 194,
    "original_position": 194,
    "commit_id": "5be0557aeee423ab250bbdc8a9d6f7c7fe64dddf",
    "user": {
      "login": "realcodywburns",
      "id": 13103499,
      "node_id": "MDQ6VXNlcjEzMTAzNDk5",
      "avatar_url": "https://avatars3.githubusercontent.com/u/13103499?u=ae966540a4c44652980f4e599599842cb70919d0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/realcodywburns",
      "html_url": "https://github.com/realcodywburns",
      "followers_url": "https://api.github.com/users/realcodywburns/followers",
      "following_url": "https://api.github.com/users/realcodywburns/following{/other_user}",
      "gists_url": "https://api.github.com/users/realcodywburns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/realcodywburns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/realcodywburns/subscriptions",
      "organizations_url": "https://api.github.com/users/realcodywburns/orgs",
      "repos_url": "https://api.github.com/users/realcodywburns/repos",
      "events_url": "https://api.github.com/users/realcodywburns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/realcodywburns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "please add license footer",
    "created_at": "2020-09-11T11:32:50Z",
    "updated_at": "2020-09-11T11:33:57Z",
    "html_url": "https://github.com/ethereumclassic/ECIPs/pull/363#discussion_r486985228",
    "pull_request_url": "https://api.github.com/repos/ethereumclassic/ECIPs/pulls/363",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/ethereumclassic/ECIPs/pulls/comments/486985228"
      },
      "html": {
        "href": "https://github.com/ethereumclassic/ECIPs/pull/363#discussion_r486985228"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/ethereumclassic/ECIPs/pulls/363"
      }
    },
    "original_commit_id": "5be0557aeee423ab250bbdc8a9d6f7c7fe64dddf"
  }