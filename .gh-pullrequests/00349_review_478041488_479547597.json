{
    "id": 479547597,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU0NzU5Nw==",
    "url": "https://api.github.com/repos/ethereumclassic/ECIPs/pulls/comments/479547597",
    "pull_request_review_id": 478041488,
    "diff_hunk": "@@ -0,0 +1,450 @@\n+---\n+lang: en\n+ECIP: ECIP-XXX\n+Title: Proto Treasury System \n+Author: Julian Mendiola, Nicolas Tallar, Brian McKenna \n+Discussions-To: https://github.com/ethereumclassic/ECIPs/issues/350 | https://github.com/input-output-hk/ECIPs/issues/2\n+Status: Draft\n+Type: Standards Track\n+Category: Core\n+Created: 2020-08-26\n+---\n+\n+### Abstract\n+This document outlines a proposal for the implementation of a proto-treasury system in Ethereum Classic.  It describes the high-level structure of the **proto-Ethereum Classic Treasury System (p-ECTS**), and its general properties. Detailed specifications for each part of the system, as well as reference implementation, can be found in the [GitHub repository]( https://github.com/input-output-hk/etc_treasury_system).\n+\n+### Motivation\n+The primary motives of the p-ECTS is to establish a stable and reliable funding mechanism for independent teams, each of whom are capable of both maintaining core clients and evolving the development of the Ethereum Classic platform, as well as initiating the funding of a Gitcoin grants pool for wider community development. \n+\n+The current approach of relying on voluntarism and benefactors to support the ETC eco-system has failed. A clear signal needs to be sent to the wider community that ETC means to move forward with confidence with a clear vision to deliver a stable stream of funding that encourages developer engagement.\n+\n+To realise this ambitious vision, innovation must be encouraged and the ETC network must be consistently maintained and continuously improved. Blockchain protocols are highly complex distributed systems that are proven to be expensive to research, develop, and implement while operating within an  increasingly competitive developer market. ETC needs to position itself as a desirable platform for innovation where developers want to invest their time making improvements and building new applications.\n+\n+ETC can gain significant competitive advantage in the medium and long-term outlook by delivering a stable, decentralized and community-driven funding system for protocol development that is backed by a clear technical roadmap. To achieve this goal, stable and reliable funding is required, under the transparent and verifiable control of the Ethereum Classic community, through the ECIP process. With full transparency, proposals can be thoroughly questioned and rigorously examined by fellow community members, with community members themselves making collective funding decisions.\n+\n+ETC needs a vision to inspire developers - particularly those currently outside the ETC ecosystem, to build on the platform, ahead of the many other well-funded competitor platforms in the space. This treasury system is designed to do this quickly and efficiently and having a high value ETC will also mitigate against potential 51% attacks.\n+\n+We recognise this proposal outlines a significant change to the future governance of ETC. For this reason, we are proposing an element of built in obsolescence so the community has the opportunity to directly assess the value of the treasury system and in time, actively vote for its continuation and further development or indeed to allow it to be reversed.\n+\n+This proposal is not designed to deliver an end-state system, but a stepping stone solution on the path to the launch of a fully decentralized treasury system.\n+\n+\n+### Specification\n+\n+#### Solution Overview and Rationale \n+\n+This proposal opts for the most simple solution for the p-ECTS to encourage collaboration and transparency for this first-step treasury system.\n+\n+This specification represents the p-ECTS only, and a best-in-class treasury and governance model, such as outlined in [[1]](https://eprint.iacr.org/2018/435.pdf\n+), can be proposed by the community via the ECIP mechanism in the future.\n+\n+We would also put forward that this treasury system would go through a formal verification process to ensure that it behaves as per the final specification.\n+\n+#### Parameters\n+\n+| Name | Description | Proposed value |\n+|---|---|---|\n+|**FORK_BLKNUM**|Block on which the Hard Fork will take place.|TBD|\n+|**Initial client members addresses**|Collections of all MemberType.Client.|TBD|\n+|**gitcoinAddress**|Gitcoin grant address.|TBD|\n+|**treasuryBlockReward**|Amount of ETC received by the treasury.|20% portion of the block reward|\n+|**gitcoinRewardPerc**|Percentage of reward that the MemberType.Gitcoin will receive.|10%|\n+|**proposalMinDeposit**| Minimum amount of ETC required to submit a proposal.|100 ETC|\n+|**proposalDebatePeriod**| Amount of time the proposal can be voted on.|30 days|\n+|**proposalPreSupportPeriod**| Amount of time before the proposal voting deadline, on which the pre_support_flag can be evaluated.|2 days|\n+|**proposalMinQuourum**| Minimum amount of ETC required to have participated in voting for a proposal (either yes/no) to be considered applicable. | 1/3 of total ETC supply (*)|\n+|**proposalMajorityPerc**| Percentage of majority (yes over no votes) required for any proposal to be passed.|60%|\n+|**lockedWaitingTime**| Time since funds are locked until they can be used for proposal voting.|1 day|\n+|**shutdownGacePeriod**| Period of time after a shutdown proposal has been approved, where proposals can no longer be submitted, but funds can be recovered.|7 days|\n+\n+(*) Obtaining the exact total supply from a smart contract is not easy, and we'll probably need to make some estimations, like taking the average of a lower and upper bound.\n+\n+#### Data Dictionary\n+\n+- **Member**: Entity that will receive funding, identified by an address.\n+- **MemberType**: \n+    - Client\n+    - Gitcoin\n+- **N**: number of active MemberType.Client to receive funding on a given time.\n+\n+#### Protocol changes: Treasury Fund\n+\n+Currently, when a block is successfully mined on the Ethereum Classic blockchain, the miner receives 3.2 ETC as a block reward. For now, all rewards and fees are taken by the miners who have produced the blocks; it is possible to take a portion of the reward to fund the treasury.  This change proposes that the block reward is adjusted so that:\n+- 80% of the block reward goes to the miners\n+- 20% goes to the p-ECTS smart contract address or the burn address (0x0)\n+(note: transaction fees will not be included in the treasury fund)\n+\n+The miner will be able to choose whether they want to send the 20% to the defined address, or burn the funds completely. \n+\n+In the special case where the treasury contracts have been shut off, the miner will reclaim the 20% and receive the full block reward.\n+\n+The funds allocation for the treasury contract, or the burn address, will be allocated in the same way as the coinbase funds. That is, with direct intervention on the balance of those accounts.\n+\n+\n+#### Funds distribution\n+\n+Treasury funds will be held in escrow in the p-ECTS smart contract. Capability to withdraw from the p-ECTS will be limited to the contract members, initially three *MemberType.Client*  for the core ETC development teams and a single *MemberType.Gitcoin* Gitcoin grant.\n+\n+Funds will be distributed as follows:\n+\n+    gitcoinFunds = treasuryBlockReward * gitcoinRewardPerc\n+    clientFunds =  (treasuryBlockReward - gitcoinReward) / N \n+\n+_Note that if the division by N might has some leftover dust, it will be \"collected\" by future distributions._\n+\n+So, for example for the initial proposed state, on which we have three client members, the distribution will be:\n+\n+- *Gitcoin grant*: 10%\n+- *Client Member 1*: 30%\n+- *Client Member 2*: 30%\n+- *Client Member 3*: 30%\n+\n+\n+Note that as the funds are allocated directly on the treasury contract address, a transaction will be needed to actually distribute ( *distributeFunds()*) them and make them available for withdrawal to each of the members, then each one will need an extra call to do so ( *withdrawFunds()*). \n+As *distributeFunds* considers the state of the contract at that moment, itâ€™s important that any method that alters this state, first executes it.\n+\n+#### Governance of p-ECTS\n+\n+##### Proposal and voting mechanics\n+\n+Governance participation is open to all ETC holders who can vote on any proposed changes to the p-ECTS. \n+\n+Votes will be counted as total locked ETC that has participated (voted yes/no) on each proposal.\n+\n+Anyone can submit a new proposal to update the p-ECTS, but they need to include a minimum amount of funds (*proposalMinDeposit*), those funds will be locked until the proposal ends (not *active*) and will be counted as *yes* votes.\n+\n+A similar lockdown mechanism applies for the voting, the voter will need to lock their funds for *lockedWaitingTime* until they're elegible and they can cast any vote with them. If the same user wants to register more funds with the same address, all their previous funds will be locked for the new *lockedWaitingTime* period as well.\n+\n+Participants will be able to unlock these funds and take them back, as long as they are not currently being used as votes on another proposal in progress.\n+\n+Participants can use the same eligible stake for voting simultaneously on any proposals under consideration.\n+\n+Participants can change their vote at any time during the proposal period, but all their funds will be taken into account and they will all need to be unlocked. For example, if I vote *yes* with 10ETC, then lock an extra 5ETC, wait the *lockedWaitingTime* and now re-vote as *no*, this will count as a 15ETC *no* vote.\n+\n+Participants, with the exception of the proposal submitter, can also unregister votes, and the same locking funds restrictions apply. For example, if I vote *yes* with 10ETC, then lock an extra 5ETC, wait the *lockedWaitingTime* and now unregister my votes, naturally, only my 10ETC *yes* vote will be revoked. The funds however, will remain blocked for withdrawl until the proposal finihed.\n+\n+A proposal lifecycle for updates to p-ECTS consists of the following phases, delimited with certain events:",
    "path": "_specs/ecip-proto-treasury-system.md",
    "position": null,
    "original_position": 126,
    "commit_id": "95ae41d860def1d0d312733c61fdbd96603ed6fb",
    "user": {
      "login": "jmendiola222",
      "id": 5326111,
      "node_id": "MDQ6VXNlcjUzMjYxMTE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5326111?u=8c699c302f069dd03d2ed2e66011c66fac95bab9&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jmendiola222",
      "html_url": "https://github.com/jmendiola222",
      "followers_url": "https://api.github.com/users/jmendiola222/followers",
      "following_url": "https://api.github.com/users/jmendiola222/following{/other_user}",
      "gists_url": "https://api.github.com/users/jmendiola222/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jmendiola222/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jmendiola222/subscriptions",
      "organizations_url": "https://api.github.com/users/jmendiola222/orgs",
      "repos_url": "https://api.github.com/users/jmendiola222/repos",
      "events_url": "https://api.github.com/users/jmendiola222/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jmendiola222/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, sorry about that, should be fine now.",
    "created_at": "2020-08-28T21:44:29Z",
    "updated_at": "2020-08-29T21:59:31Z",
    "html_url": "https://github.com/ethereumclassic/ECIPs/pull/349#discussion_r479547597",
    "pull_request_url": "https://api.github.com/repos/ethereumclassic/ECIPs/pulls/349",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/ethereumclassic/ECIPs/pulls/comments/479547597"
      },
      "html": {
        "href": "https://github.com/ethereumclassic/ECIPs/pull/349#discussion_r479547597"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/ethereumclassic/ECIPs/pulls/349"
      }
    },
    "original_commit_id": "fe5fe9e05a7cdb49ec4be090aea0d5f63470fd8b",
    "in_reply_to_id": 478913491
  }