From 04c7cb3804ca7fe454e9f951abe83820d70a8b86 Mon Sep 17 00:00:00 2001
From: Donald McIntyre <donald@etherplan.com>
Date: Mon, 20 Jan 2020 12:04:16 -0700
Subject: [PATCH 1/5] Proposal for owner, member, editor, & author removal

Proposal to remove Wei Tang (@sorpaas) from internal function in the Ethereum Classic repository.
---
 _specs/ECIP-TBD | 36 ++++++++++++++++++++++++++++++++++++
 1 file changed, 36 insertions(+)
 create mode 100644 _specs/ECIP-TBD

diff --git a/_specs/ECIP-TBD b/_specs/ECIP-TBD
new file mode 100644
index 00000000..87f1c490
--- /dev/null
+++ b/_specs/ECIP-TBD
@@ -0,0 +1,36 @@
+---
+ecip: ECIP number TBD
+title: Proposal for owner, member, editor, & author removal
+author: Donald McIntyre (@TokenHash)
+discussions-to: https://github.com/ethereumclassic/ECIPs/issues/273
+status: Draft
+type: Meta
+created: 2020-01-20
+license: Apache-1
+---
+
+### Proposal
+
+I propose Wei Tang (@sorpaas) be expelled from the Ethereum Classic organization as a 'member' or 'owner' whatever is his role there. I also propose for him to be taken out as an 'editor' in the ECIP process, namely ECIP-1000, and that ECIP-1000 be replaced with a new clean 'process' ECIP with a new author, so Sorpaas is removed from that position as well.
+
+### Rationale
+
+He doxxed two editors in ECIP-1000 and fails to correct that doxxing even after being called out for it.
+Abuses his position as ECIP 'editor' and ECIP-1000 'author' to impose false process rules and procedures that only advance his ideas and agenda.
+He constantly lies about how the ECIP process 'should' be according to imaginary rules he makes up, just to stop others from opining and introducing their ideas.
+He is persistently abusive and bully to other developers and contributors by threatening and telling them they 'want bugs' on ETC and that they promote a new 'theDAO'.
+He falsely creates an equivalency between the operating blockchain and the ECIP process as if the ECIP process were as sacred as the blockchain, and property and agreements within it.
+
+### Motivation
+
+In general, Sorpaas has become a very negative participant, is inhibiting others from freely participating in the development process, and abuses his quadruple position as a client developer, ETC Github member, ECIP editor, and ECIP-1000 author.
+
+For the above I make this proposal for his removal from all those positions in the ETC ecosystem.
+
+### Implementation
+
+When this ECIP is accepted by rough consensus, the modifications proposed could be implemented by Ethereum Classic Organization owners on Github and ECIP editors directly on the corresponding ECIPs.
+
+### Copyright/Licensing
+
+Apache -2

From 971064478b1bd63d38e302cd37c6ca5a5d6fee6e Mon Sep 17 00:00:00 2001
From: Donald McIntyre <donald@etherplan.com>
Date: Mon, 20 Jan 2020 12:09:14 -0700
Subject: [PATCH 2/5] Rename ECIP-TBD to ECIP-TBD.md

---
 _specs/{ECIP-TBD => ECIP-TBD.md} | 0
 1 file changed, 0 insertions(+), 0 deletions(-)
 rename _specs/{ECIP-TBD => ECIP-TBD.md} (100%)

diff --git a/_specs/ECIP-TBD b/_specs/ECIP-TBD.md
similarity index 100%
rename from _specs/ECIP-TBD
rename to _specs/ECIP-TBD.md

From 27c30a592552777a3e0c9bce51c108b77abf38ca Mon Sep 17 00:00:00 2001
From: Donald McIntyre <donald@etherplan.com>
Date: Mon, 20 Jan 2020 12:17:35 -0700
Subject: [PATCH 3/5] Update ECIP-TBD.md

---
 _specs/ECIP-TBD.md | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/_specs/ECIP-TBD.md b/_specs/ECIP-TBD.md
index 87f1c490..95c3a385 100644
--- a/_specs/ECIP-TBD.md
+++ b/_specs/ECIP-TBD.md
@@ -15,11 +15,11 @@ I propose Wei Tang (@sorpaas) be expelled from the Ethereum Classic organization
 
 ### Rationale
 
-He doxxed two editors in ECIP-1000 and fails to correct that doxxing even after being called out for it.
-Abuses his position as ECIP 'editor' and ECIP-1000 'author' to impose false process rules and procedures that only advance his ideas and agenda.
-He constantly lies about how the ECIP process 'should' be according to imaginary rules he makes up, just to stop others from opining and introducing their ideas.
-He is persistently abusive and bully to other developers and contributors by threatening and telling them they 'want bugs' on ETC and that they promote a new 'theDAO'.
-He falsely creates an equivalency between the operating blockchain and the ECIP process as if the ECIP process were as sacred as the blockchain, and property and agreements within it.
+1. He doxxed two editors in ECIP-1000 and fails to correct that doxxing even after being called out for it.
+2. Abuses his position as ECIP 'editor' and ECIP-1000 'author' to impose false process rules and procedures that only advance his ideas and agenda.
+3. He constantly lies about how the ECIP process 'should' be according to imaginary rules he makes up, just to stop others from opining and introducing their ideas.
+4. He is persistently abusive and bully to other developers and contributors by threatening and telling them they 'want bugs' on ETC and that they promote a new 'theDAO'.
+5. He falsely creates an equivalency between the operating blockchain and the ECIP process as if the ECIP process were as sacred as the blockchain, and property and agreements within it.
 
 ### Motivation
 

From e8bbd728be0cb187fe1256e147cd3294dba27e86 Mon Sep 17 00:00:00 2001
From: Wei Tang <hi@that.world>
Date: Mon, 20 Jan 2020 20:39:38 +0100
Subject: [PATCH 4/5] Completely expell @sorpaas

---
 _specs/ecip-1000.md | 358 --------------------------------------------
 _specs/ecip-1022.md | 338 -----------------------------------------
 _specs/ecip-1025.md | 168 ---------------------
 _specs/ecip-1026.md |  94 ------------
 _specs/ecip-1036.md |  31 ----
 _specs/ecip-1040.md | 239 -----------------------------
 _specs/ecip-1065.md |  84 -----------
 _specs/ecip-1066.md |  24 ---
 _specs/ecip-1068.md |  72 ---------
 _specs/ecip-1069.md |  78 ----------
 _specs/ecip-1071.md | 133 ----------------
 _specs/ecip-1072.md |  80 ----------
 _specs/ecip-1073.md |  87 -----------
 _specs/ecip-1074.md |  97 ------------
 14 files changed, 1883 deletions(-)
 delete mode 100644 _specs/ecip-1000.md
 delete mode 100644 _specs/ecip-1022.md
 delete mode 100644 _specs/ecip-1025.md
 delete mode 100644 _specs/ecip-1026.md
 delete mode 100644 _specs/ecip-1036.md
 delete mode 100644 _specs/ecip-1040.md
 delete mode 100644 _specs/ecip-1065.md
 delete mode 100644 _specs/ecip-1066.md
 delete mode 100644 _specs/ecip-1068.md
 delete mode 100644 _specs/ecip-1069.md
 delete mode 100644 _specs/ecip-1071.md
 delete mode 100644 _specs/ecip-1072.md
 delete mode 100644 _specs/ecip-1073.md
 delete mode 100644 _specs/ecip-1074.md

diff --git a/_specs/ecip-1000.md b/_specs/ecip-1000.md
deleted file mode 100644
index 767563b6..00000000
--- a/_specs/ecip-1000.md
+++ /dev/null
@@ -1,358 +0,0 @@
----
-lang: en
-ecip: 1000
-title: ECIP Process
-status: Active
-type: Meta
-discussions-to: https://github.com/ethereumclassic/ECIPs/issues/58
-author: Wei Tang (@sorpaas)
-created: 2017-06-29
-license: Apache-2
----
-
-# Abstract
-
-An Ethereum Classic Improvement Proposal (ECIP) is a design document providing information to the Ethereum Classic community, or describing a new feature for Ethereum Classic or its processes or environment. The ECIP should provide a concise technical specification of the feature and a rationale for the feature.
-
-We intend ECIPs to be the primary mechanism for proposing new features, for collecting community input on an issue, and for documenting the design decisions that have gone into Ethereum Classic. The **ECIP author** is responsible for building consensus within the community and documenting dissenting opinions.
-
-Because the ECIPs are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal.
-
-# Copyright
-
-This ECIP is licensed Apache-2, originally by [Luke Dashjr](https://github.com/luke-jr) under BSD 2-clause license.
-
-# ECIP Workflow
-
-## Introduction
-
-The ECIP process begins with a new idea for Ethereum Classic. Each potential ECIP must have **a champion** -- someone who writes the ECIP using the style and format described below, shepherds the discussions in the appropriate forums, and attempts to build community consensus around the idea. The **ECIP champion (a.k.a. Author)** should first attempt to ascertain whether the idea is ECIP-able.
-
-Small enhancements or patches to a particular piece of software often don't require standardization between multiple projects; these don't need an ECIP and should be injected into the relevant project-specific development workflow with a patch submission to the applicable issue tracker.
-
-Additionally, many ideas have been brought forward for changing Ethereum Classic that have been rejected for various reasons.
-
-## Steps
-
-**1:** The first step should be to search past discussions to see if an idea has been considered before, and if so, what issues arose in its progression.
-
-After investigating past work, the best way to proceed is by posting about the new idea to the [Ethereum Classic Discord #ecips Channel](https://discord.gg/8q8xRtQ).
-
-Vetting an idea publicly before going as far as writing a ECIP is meant to save both the potential author and the **wider community** time.
-
-Asking the Ethereum Classic community first if an idea is original helps prevent too much time being spent on something that is guaranteed to be rejected based on prior discussions (searching the internet does not always do the trick).
-
-It also helps to make sure the idea is applicable to the entire community and not just the author. Just because an idea sounds good to the author does not mean it will work for most people in most areas where Ethereum Classic is used.
-
-**2:** Once the champion has asked the Ethereum Classic community as to whether an idea has any chance of acceptance, a **draft ECIP** should be submitted to the [ECIPs git repository](https://github.com/ethereumclassic/ECIPs) as a pull request. This gives the author a chance to flesh out the draft ECIP to make it properly formatted, of high quality, and to address additional concerns about the proposal. This draft must be written in ECIP style as described below, and named with an alias such as "ecip-johndoe-infinitecoins" until an editor has assigned it an ECIP number (authors MUST NOT self-assign ECIP numbers).
-
-ECIP authors **are responsible for collecting community feedback** on both the initial idea and the ECIP before submitting it for review. However, wherever possible, long open-ended discussions on public groups or mailing lists should be avoided. Strategies to keep the discussions efficient include: setting up a separate SIG mailing list for the topic, having the ECIP author accept private comments in the early design phases, setting up a wiki page or git repository, etc. ECIP authors should use their discretion here.
-
-It is highly recommended that **a single ECIP contain a single key proposal or new idea**. The more focused the ECIP, the more successful it tends to be. If in doubt, split your ECIP into several well-focused ones.
-
-**3:** When the ECIP draft is complete, an ECIP editor will assign the ECIP a number, label it as Standards Track, Informational, or Process, and merge the pull request to the ECIPs git repository.
-
-The ECIP editor will not unreasonably reject an ECIP.
-
-Reasons for rejecting ECIPs include duplication of effort, disregard for formatting rules, being too unfocused or too broad, being technically unsound, not providing proper motivation or addressing backwards compatibility, or not in keeping with the Ethereum Classic philosophy.
-
-For a ECIP to be accepted it must meet certain minimum criteria. It must be a clear and complete description of the proposed enhancement. The enhancement must represent a net improvement. The proposed implementation, if applicable, must be solid and must not complicate the protocol unduly.
-
-**4:** During the life cycle of the ECIP, the author may update the draft as necessary in the git repository. **Updates to drafts should also be submitted by the author as pull requests.**
-
-## Transferring ECIP Ownership
-
-It occasionally becomes necessary to transfer ownership of ECIPs to a **new champion**. In general, we'd like to retain the original author **as a co-author** of the transferred ECIP, but that's really up to the original author. 
-
-A good reason to transfer ownership is because the original author no longer has the time or interest in updating it or following through with the ECIP process, or has fallen off the face of the net (i.e. is unreachable or not responding to email). A bad reason to transfer ownership is because you don't agree with the direction of the ECIP. We try to build consensus around an ECIP, but if that's not possible, you can always submit a competing ECIP.
-
-**If you are interested in assuming ownership of a ECIP**, send a message asking to take over, addressed to both the original author and the ECIP editor. If the original author doesn't respond to email in a timely manner, the ECIP editor will make a unilateral decision (it's not like such decisions can't be reversed :).
-
-## ECIP Editors
-
-The current ECIP editors are:
-
-* Wei Tang (@sorpaas)
-* Isaac Ardis (@meowsbits)
-* Cody Burns (@realcodywburns)
-* Afri Schoedon (@soc1c)
-* Yaz Khoury (@YazzyYaz)
-* Zachary Belford (@BelfordZ)
-
-## ECIP Editor Responsibilities & Workflow
-
-### Introduction
-
-ECIP editors are intended to fulfill administrative and editorial responsibilities. ECIP editors monitor ECIP changes, and update ECIP headers as appropriate.
-
-### Steps
-
-**1:** Each new ECIP should first be submitted as a **"pull request"** to the [ECIPs git repository](https://github.com/ethereumclassic/ECIPs). Then, an editor does the following:
-
-* Read the ECIP to check if it is ready: sound and complete. The ideas must make technical sense, even if it doesn't seem likely to be accepted.
-* The title should accurately describe the content.
-* Motivation and backward compatibility (when applicable) must be addressed.
-* The defined Layer header must be correctly assigned for the given specification.
-* Licensing terms must be acceptable for ECIPs.
-
-**2:** If the ECIP isn't ready, the editor will send it back to the author for revision with specific instructions.
-
-**3:** Once the ECIP is ready, the ECIP editor will:
-
-* Assign a ECIP number in the pull request.
-* Merge the pull request when it is ready.
-* List the ECIP in [[README.mediawiki]]
-
-# ECIP Format and Structure
-
-## Specification
-
-ECIPs should be written in **mediawiki** or **markdown** format.
-
-Each ECIP should have the following parts:
-
-- **Preamble** -- Headers containing metadata about the ECIP [see below](https://github.com/ethereumclassic/ECIPs/blob/master/ECIPs/ECIP-1000.mediawiki#ecip-header-preamble).
-- **Abstract** -- A short (~200 word) description of the technical issue being addressed.
-- **Copyright** -- The ECIP must be explicitly licensed under acceptable copyright terms [see below](https://github.com/ethereumclassic/ECIPs/blob/master/ECIPs/ECIP-1000.mediawiki#ecip-licensing)
-- **Specification** -- The technical specification should describe the syntax and semantics of any new feature. It should be detailed enough to allow competing, interoperable implementations for any of the current Ethereum Classic platforms.
-- **Motivation** -- The motivation is critical for ECIPs that want to change the Ethereum Classic protocol. It should clearly explain why the existing protocol is inadequate to address the problem that the ECIP solves.
-- **Rationale** -- The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work. It should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
-- **Backwards compatibility** -- All ECIPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The ECIP must explain how the author proposes to deal with these incompatibilities.
-- **Reference implementation** -- The reference implementation must be completed before any ECIP is given **"Final"** status, but it need not be completed before the ECIP is **"Accepted"**. It is better to finish the specification and rationale first and reach consensus on it before writing code. The final implementation must include test code and documentation appropriate for the Ethereum Classic protocol.
-
-### ECIP Header Preamble
-
-Each ECIP must begin with an RFC 822 style header preamble. The headers must appear in the following order. Headers marked with "*" are optional and are described below. All other headers are required.
-
-- **ECIP:** (ECIP number, or "?" before being assigned)
-- **Layer:** (Consensus (soft fork) | Consensus (hard fork) | Peer Services | API/RPC | Applications)
-- **Title:** (ECIP title; maximum 44 characters) 
-- **Author:** (authors real names and email addrs)
-- **Discussions-To:** (email address)
-- **Comments-Summary:** (summary tone)
-- **Comments-URI:** (links to wiki page for comments)
-- **Status:** (Draft | Last Call | Accepted | Final | Deferred | Replaced | Rejected | Withdrawn)
-- **Type:** (Standards Track | Informational | Process)
-- **Created:** (date created on, in ISO 8601 (yyyy-mm-dd) format)
-- **License:** (abbreviation for approved license(s))
-- **License-Code:** (abbreviation for code under different approved license(s))
-- **Requires:** (ECIP number(s))
-- **Replaces:** (ECIP number)
-- **Superseded-By:** (ECIP number)
-
-The `Layer` header (only for Standards Track ECIPs) documents which layer of Ethereum Classic the ECIP applies to.
-
-The `Author` header lists the names and email addresses of all the authors/owners of the ECIP.
-The format of the Author header value must be:
-
-	Random J. User <123@dom.ain>
-
-If there are multiple authors, each should be on a separate line following RFC 2822 continuation line conventions.
-
-While an ECIP is in private discussions (usually during the initial Draft phase), a`Discussions-To` header will indicate the mailing list or URL where the ECIP is being discussed. No `Discussions-To` header is necessary if the ECIP is being discussed privately with the author.
-
-The `Type` header specifies the type of ECIP: Standards Track, Informational, or Process.
-
-The `Created` header records the date that the ECIP was assigned a number.
-
-ECIPs may have a `Requires` header, indicating the ECIP numbers that this ECIP depends on.
-
-ECIPs may also have a `Superseded-By` header indicating that a ECIP has been rendered obsolete by a later document; the value is the number of the ECIP that replaces the current document. The newer ECIP must have a `Replaces` header containing the number of the ECIP that it rendered obsolete.
-
-### Auxiliary Files
-
-ECIPs may include auxiliary files such as diagrams. If if requires images, the image files should be included in a subdirectory of the `assets` folder for that ECIP as follow: `assets/ecip-X`. When linking to an image in the ECIP, use the related links such as `./assets/ecip-X/image.png`.
-
-## ECIP Types
-
-There are three types of ECIP:
-
-- A **Standard Track ECIP** describes any change that affects most or all Ethereum Classic implementations, such as a change to the network protocol, a change in block or transaction validity rules, proposed application standards/conventions, or any change or addition that affects the interoperability of applications using Ethereum Classic. Furthermore, Standard Track ECIPs can be broken down into the following categories:
-  - **Core** - improvements requiring a consensus fork, as well as changes that are not necessarily consensus critical but may be relevant to core developer discussions.
-  - **Networking** - improvements to networking protocol specifications.
-  - **Interface** - improvements around client [API/RPC] specifications and standards, and also certain language-level standards like method names  and contract ABIs.
-  - **ECBP (Ethereum Classic Best Practice)** - application-level standards and conventions, including contract standards such as token standards, name registries, URI schemes, library/package formats, and wallet formats.
-- A **Meta ECIP** describes a **process** surrounding Ethereum Classic or proposes a change to (or an event in) a process. Process ECIPs are like Standard Track ECIPs, but apply to areas other than the Ethereum Classic protocol itself. They may propose an implementation, but not to Ethereum Classic's codebase; they often require community consensus; unlike Informational ECIPs, they are more than recommendations, and users are typically not free to ignore them. Examples include procedures, guidelines, changes to the decision-making process (e.g. this ECIP-1000 process document), and changes to the tools or environment used in Ethereum Classic development. *Any meta-ECIP is also considered a Process ECIP.*
-- An **Informational ECIP** describes an Ethereum Classic design issue, or provides general guidelines or information to the Ethereum Classic community, but does not propose a new feature. Informational ECIPs do not necessarily represent Ethereum Classic community consensus or a recommendation, so users and implementors are free to ignore Informational ECIPs or follow their advice.
-
-It is highly recommended that a single ECIP contain a single key proposal or new idea. The more focused the ECIP, the more successful it tends to be. A change to one client doesn't require an ECIP; a change that affects multiple clients, or defines a standard for multiple apps to use, does.
-
-An ECIP must meet certain minimum criteria. It must be a clear and complete description of the proposed enhancement. The enhancement must represent a net improvement.
-
-## ECIP Status Field
-
-### Specification
-
-The typical paths of the status of ECIPs are as follows:
-
-![ECIP process](../assets/ecip-1000/process.png)
-
-Champions of an ECIP may decide on their own to change the status between `Draft`, `Deferred`, or `Withdrawn`.
-
-The ECIP editor may also change the status to Deferred when no progress is being made on the ECIP.
-
-An ECIP may only change status from `Draft` (or `Rejected`) to `Last Call`, when the author deems it is complete, has a working implementation (where applicable), and has community plans to progress it to `Final` status.
-
-ECIPs should be changed from `Draft` or `Last Call` status, to `Rejected`, upon request by any person, if they have not made progress in three years. Such a ECIP may be changed to `Draft` status if the champion provides revisions that meaningfully address public criticism of the proposal, or to `Last Call` if it meets the criteria required as described in the previous paragraph.
-
-An `Accepted` ECIP may progress to `Final` only when specific criteria reflecting real-world adoption has occurred. This is different for each ECIP depending on the nature of its proposed changes, which will be expanded on below. Evaluation of this status change should be **objectively verifiable**, and/or be discussed on the development calls, Discord channel, other groups or the mailing list.
-
-When a `Final` ECIP is no longer relevant, its status may be changed to `Replaced`. This change must also be **objectively verifiable** and/or discussed.
-
-Some Informational ECIPs, which are considered process ECIPs, may also be moved to a status of `Active` instead of `Final` if they are never meant to be completed, e.g. this [ECIP-1000.](./ecip-1000.md)
-
-`Draft` ECIPs which may be in a very early stage may be entered as `WIP` ECIPs, which means they are a work in progress.
-
-A process ECIP may change status from `Draft` to `Final` when it achieves rough consensus on the discussion process. Such a proposal is said to have rough consensus if it has been open to discussion on the development calls, Discord channel, other groups or the mailing list for at least one month, and no person maintains any unaddressed substantiated objections to it. Addressed or obstructive objections may be ignored/overruled by general agreement that they have been sufficiently addressed, but clear reasoning must be given in such circumstances.
-
-### Progression to Final status
-
-Peer services ECIPs should be observed to be adopted by at least 1% of public listening nodes for one month.
-
-API/RPC and application layer ECIPs must be implemented by at least two independent and compatible software applications.
-
-Software authors are encouraged to publish summaries of what ECIPs their software supports to aid in verification of status changes. Good examples of this, at the time of writing this ECIP, can be observed in [Bitcoin Core's doc/BIPs.md file](https://github.com/bitcoin/bitcoin/blob/master/doc/BIPs.md) as well as [Bitcoin Wallet for Android's wallet/README.specs file](https://github.com/schildbach/bitcoin-wallet/blob/master/wallet/README.specs).
-
-These criteria are considered objective ways to observe the de facto adoption of the ECIP, and are not to be used as reasons to oppose or reject an ECIP. Should an ECIP become actually and unambiguously adopted despite not meeting the criteria outlined here, it should still be updated to `Final` status.
-
-## Rationale
-
-**Why is this necessary at all?**
-
-- Many ECIPs with significant real-world use have been left as `Draft` or `Last Call` status longer than appropriate. By giving objective criteria to judge the progression of ECIPs, this proposal aims to help keep the **Status** accurate and up-to-date.
-
-**What is the ideal percentage of listening nodes needed to adopt peer services proposals?**
-
-- This is unknown, and set rather arbitrarily at this time. For a random selection of peers to have at least one other peer implementing the extension, 13% or more would be necessary, but nodes could continue to scan the network for such peers with perhaps some reasonable success. Furthermore, service bits exist to help identification upfront.
-
-**Why is it necessary for at least two software projects to release an implementation of API/RPC and application layer ECIPs, before they become Final?**
-
-- If there is only one implementation of a specification, there is no other program for which a standard interface is used with or needed.
-- Even if there are only two projects rather than more, some standard coordination between them exists.
-
-**What if a ECIP is proposed that only makes sense for a single specific project?**
-
-- The ECIP process exists for standardisation between independent projects. If something only affects one project, it should be done through that project's own internal processes, and never be proposed as a ECIP in the first place.
-
-## ECIP comments
-
-### Specification
-
-Each ECIP should, in its preamble, link to a public wiki page with a summary tone of the comments on that page.
-
-Reviewers of the ECIP who consider themselves qualified, should post their own comments on this wiki page.
-
-The comments page should generally only be used to post final comments for a completed ECIP.
-
-If an ECIP is not yet completed, reviewers should instead post on the applicable development Discord group or mailing list thread to allow the ECIP author(s) to address any concerns or problems pointed out by the review.
-
-Some ECIPs receive exposure outside the development community prior to completion, and other ECIPs might not be completed at all. To avoid a situation where critical ECIP reviews may go unnoticed during this period, reviewers may, at their option, still post their review on the comments page, provided they first post it to the mailing list and plan to later remove or revise it as applicable based on the completed version. Such revisions should be made by editing the previous review and updating the timestamp. Reviews made prior to the complete version may be removed if they are no longer applicable and have not been updated in a timely manner (eg, within one month).
-
-Pages must be named after the full ECIP number (eg, "ECIP 0001") and placed in the "Comments" namespace.
-
-For example, the link for ECIP 1 will be:
-
-	https://github.com/ethereumclassic/ECIPs/wiki/Comments:ECIP-0001 .
-
-Comments posted to this wiki should use the following format:
-
-    <Your opinion> --<Your name>, <Date of posting, as YYYY-MM-DD>
-
-ECIPs may also choose to list a second forum for ECIP comments, in addition to the ECIPs wiki.
-In this case, the second forum's URI should be listed below the primary wiki's URI.
-
-After some time, the ECIP itself may be updated with a summary tone of the comments.
-Summary tones may be chosen from the following, but this ECIP does not intend to cover all possible nuances and other summaries may be used as needed:
-
-* No comments yet.
-* Unanimously Recommended for implementation
-* Unanimously Discourage for implementation
-* Mostly Recommended for implementation, with some Discouragement
-* Mostly Discouraged for implementation, with some Recommendation
-
-For example, the preamble to ECIP 1 might be updated to include the line:
-
-    Comments-Summary: No comments yet.
-    Comments-URI: https://github.com/ethereumclassic/ECIPs/wiki/Comments:ECIP-1000
-                  https://some-other-wiki.org/ECIP_1_Comments
-
-These fields must follow the **Discussions-To** header defined in ECIP 1 (if that header is not present, it should follow the position where it would be present; generally this is immediately above the **Status** header).
-
-To avoid doubt: comments and status are unrelated metrics to judge an ECIP, and neither should be directly influencing the other.
-
-## Rationale
-
-**What is the purpose of ECIP comments?**
-
-- Various ECIPs have been adopted (the criteria required for `Final` status) despite being considered generally inadvisable. Some presently regard ECIPs as a "good idea" simply by virtue of them being assigned an ECIP number. Due to the low barrier of entry for submission of new ECIPs, it seems advisable for a way for reviewers to express their opinions on them in a way that is consumable to the public without needing to review the entire development discussion.
-
-**Will ECIP comments be censored or limited to particular participants/"experts"?**
-
-- Participants should freely refrain from commenting outside of their area of knowledge or expertise. However, comments should not be censored, and participation should be open to the public.
-
-## ECIP Licensing
-
-### Specification
-
-New ECIPs may be accepted with the following licenses. Each new ECIP must identify at least one acceptable license in its preamble. The License header in the preamble must be placed after the Created header. Each license must be referenced by their respective abbreviation given below.
-
-For example, a preamble might include the following License header:
-
-    License: BSD-2-Clause
-             GNU-All-Permissive
-
-In this case, the ECIP text is fully licensed under both the OSI-approved BSD 2-clause license as well as the GNU All-Permissive License, and anyone may modify and redistribute the text provided they comply with the terms of *either* license. In other words, the license list is an "OR choice", not an "AND also" requirement.
-
-It is also possible to license source code differently from the ECIP text. A optional License-Code header is placed after the License header. Again, each license must be referenced by their respective abbreviation given below.
-
-For example, a preamble specifying the optional License-Code header might look like:
-
-    License: BSD-2-Clause
-             GNU-All-Permissive
-    License-Code: GPL-2.0+
-
-In this case, the code in the ECIP is not available under the BSD or All-Permissive licenses, but only under the terms of the GNU General Public License (GPL), version 2 or newer.
-If the code were to be available under *only* version 2 exactly, the "+" symbol should be removed from the license abbreviation.
-For a later version (eg, GPL 3.0), you would increase the version number (and retain or remove the "+" depending on intent).
-
-    License-Code: GPL-2.0   # This refers to GPL v2.0 *only*, no later license versions are acceptable.
-    License-Code: GPL-2.0+  # This refers to GPL v2.0 *or later*.
-    License-Code: GPL-3.0   # This refers to GPL v3.0 *only*, no later license versions are acceptable.
-    License-Code: GPL-3.0+  # This refers to GPL v3.0 *or later*.
-
-In the event that the licensing for the text or code is too complicated to express with a simple list of alternatives, the list should instead be replaced with the single term "Complex". In all cases, details of the licensing terms must be provided in the Copyright section of the ECIP.
-
-ECIPs are not required to be *exclusively* licensed under approved terms, and may also be licensed under unacceptable licenses *in addition to* at least one acceptable license.
-In this case, only the acceptable license(s) should be listed in the License and License-Code headers.
-
-### Recommended licenses
-
-* Apache-2.0: [Apache License, version 2.0](http://www.apache.org/licenses/LICENSE-2.0)
-* BSD-2-Clause: [OSI-approved BSD 2-clause license](https://opensource.org/licenses/BSD-2-Clause)
-* BSD-3-Clause: [OSI-approved BSD 3-clause license](https://opensource.org/licenses/BSD-3-Clause)
-* CC0-1.0: [Creative Commons CC0 1.0 Universal](https://creativecommons.org/publicdomain/zero/1.0/)
-* GNU-All-Permissive: [GNU All-Permissive License](http://www.gnu.org/prep/maintain/html_node/License-Notices-for-Other-Files.html)
-
-In addition, it is recommended that literal code included in the ECIP be dual-licensed under the same license terms as the project it modifies. For example, literal code intended for Ethereum Classic Core would ideally be dual-licensed under the MIT license terms as well as one of the above with the rest of the ECIP text.
-
-### Not recommended, but acceptable licenses
-
-* BSL-1.0: [Boost Software License, version 1.0](http://www.boost.org/LICENSE_1_0.txt)
-* CC-BY-4.0: [Creative Commons Attribution 4.0 International](https://creativecommons.org/licenses/by/4.0/)
-* CC-BY-SA-4.0: [Creative Commons Attribution-ShareAlike 4.0 International](https://creativecommons.org/licenses/by-sa/4.0/)
-* MIT: [Expat/MIT/X11 license](https://opensource.org/licenses/MIT)
-* AGPL-3.0+: [GNU Affero General Public License (AGPL), version 3 or newer](http://www.gnu.org/licenses/agpl-3.0.en.html)
-* FDL-1.3: [GNU Free Documentation License, version 1.3](http://www.gnu.org/licenses/fdl-1.3.en.html)
-* GPL-2.0+: [GNU General Public License (GPL), version 2 or newer](http://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html)
-* LGPL-2.1+: [GNU Lesser General Public License (LGPL), version 2.1 or newer](http://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html)
-
-## Rationale
-
-**Why are there software licenses included?**
-
-* Some ECIPs, especially consensus layer, may include literal code in the ECIP itself which may not be available under the exact license terms of the ECIP.
-* Despite this, not all software licenses would be acceptable for content included in ECIPs.
-
-# See Also
-
-* [RFC 7282: On Consensus and Humming in the IETF](https://tools.ietf.org/html/rfc7282)
diff --git a/_specs/ecip-1022.md b/_specs/ecip-1022.md
deleted file mode 100644
index de9a588d..00000000
--- a/_specs/ecip-1022.md
+++ /dev/null
@@ -1,338 +0,0 @@
----
-lang: en
-ecip: 1022
-title: Generalized Version Bits Voting for Consensus Soft and Hard Forks
-status: Draft
-type: Meta
-discussions-to: https://github.com/ethereumclassic/ECIPs/issues/190
-author: Wei Tang (@sorpaas)
-created: 2017-06-28
-license: Apache-2.0
----
-
-## Abstract
-
-The following ECIP tries to bring the best practices about how Bitcoin
-deals with consensus hard fork
-([BIP-9](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki)
-and
-[BIP-135](https://github.com/bitcoin/bips/blob/master/bip-0135.mediawiki))
-into Ethereum Classic. Rather than hard-code a block number as we
-currently do, each block mined emits support of the new consensus
-hard-fork. Only when a large enough portion of the network support it,
-the hard-fork is "locked-in" and will be activated.
-
-## Motivation
-
-**Lack of an appropriate voting method can results in network
-forking**. The DAO hard fork was such an example. Currently the way
-Ethereum used to gather opinions was through
-[CarbonVote](http://carbonvote.com/). It indeed has the advantage that
-it brings the opinions of Ethereum holders rather than
-miners. However, it is not enforceable and we all know the disastrous
-result it brought during the DAO hard fork period. We don't want that
-to happen again.
-
-**Miner community, stake holders and proof of work**. It is common
-knowledge that Ethereum Classic will probably stay in proof of work,
-rather than, like Ethereum, switch to a proof of stake
-algorithm. Combining this ECIP together with ECIP-1023, we combines
-opinions from both the miner community and ETC coin holders to reach
-consensus about whether a hard fork should occur.
-
-**Best practices from
-Bitcoin**. [BIP-9](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki),
-which uses version bits mined in each blocks to vote for consensus
-soft fork has be successfully conducted for several. Its upgraded
-version, BIP-135, aims to deal with both soft forks and hard forks
-alike.
-
-**Potentially faster adoption of new consensus hard fork**. When
-dealing with emergency consensus hard fork for preventing network
-attacks, the developer would not need to artificially insert a "hard
-fork block number" (which must leave enough time for everyone else to
-upgrade their clients, and then wait for that block). The ETC coin
-holders and miners collectively decide when the hard fork happens,
-which potentially could be faster than hard coded block numbers.
-
-**Ethereum Classic will become a stable protocol soon**. When we
-finished dealing with the monetary policy and finally the difficulty
-bomb, ETC's protocol would become a rather stable one. This means most
-of the new consensus hard fork would be new features of the network,
-rather than fixing existing bugs. In that case, voting would be
-important to keep the whole network healthy.
-
-## Terms and conventions
-
-The version bits used by this proposal for signaling deployment of
-forks are referred to as 'signaling bits' or shortened to 'bits' where
-unambiguous.
-
-The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
-"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
-document are to be interpreted as described in RFC 2119.
-
-## Specification
-
-### Signaling bits
-
-Ethereum's extraData field are 32-bytes, i.e. a 256-bit value. The
-field itself should be a RLP list that follows:
-
-```
-[ version: P, signalingBits: S, clientIdentity: B ]
-```
-
-For this ECIP, `version` should equal to `1`, and `signalingBits` and
-`clientIdentity` fulfill the rest of the extraData field as long as it
-does not exceed the maximum size allowed. This allows us to have way
-more concurrent signalings and better backward compatibility than
-Bitcoin.
-
-`signalingBits` are right-aligned, i.e. `0b1` has its bit at index 0
-set, `0b10` has its bit at index 1 set, `0b100` has its bit at index 2
-set.
-
-### Deployment states
-
-With each block and fork, we associate a deployment state. The
-possible states are:
-
-* **DEFINED** is the first state that each fork starts out as. The
-  genesis block for any chain SHALL by definition be in this state for
-  each deployment.
-* **STARTED** for blocks past the starttime.
-* **LOCKED_IN** after STARTED, if at least threshold out of windowsize
-  blocks have the associated bit set in `signalingBits` in `extraData`
-  block header, measured at next height that is evenly divisible by
-  the windowsize.
-* **ACTIVE** for all blocks after the grace period conditions have
-  been met.
-* **FAILED** if past the timeout time and LOCKED_IN was not reached.
-
-In accordance with BIP9, a block's state SHALL never depend on its own
-extraData; only on that of its ancestors.
-
-### Fork deployment parameters
-
-Each fork deployment is specified by the following per-chain
-parameters:
-
-* The **name** specifies a very brief description of the fork,
-  reasonable for use as an identifier. For deployments described in a
-  single BIP, it is recommended to use the name "bipN" where N is the
-  appropriate BIP number.
-* The **bit** determines which bit in the extraData field of the block
-  is to be used to signal the fork deployment.
-* The **start** specifies a block number at which the bit gains its
-  meaning.
-* The **timeout** specifies a time at which the deployment is
-  considered failed. If the current block number >= (start + timeout)
-  and the fork has not yet locked in (including this block's bit
-  state), the deployment is considered failed on all descendants of
-  the block.
-* The **windowsize** specifies the number of past blocks (including
-  the block under consideration) to be taken into account for locking
-  in a fork.
-* The **threshold** specifies a number of blocks, in the range of
-  `1..windowsize`, which must signal for a fork in order to lock it
-  in. The support is measured when the chain height is evenly
-  divisible by the windowsize. If the windowsize is set to 2016 (as in
-  BIP9) this coincides with the 2016-block re-targeting intervals.
-* The **minlockedblocks** specifies a minimum number of blocks which a
-  fork must remain in locked-in state before it can become
-  active. Both minlockedblocks and minlockedtime (see below) must be
-  satisfied before a fork can become active. If the current block
-  number >= (minlockedblocks + the block number that locked in the
-  fork), then the fork becomes activated.
-
-### Tallying
-
-If a block's extraData specifies a version other than `1`, all its
-signaling bits MUST be treated as if they are '0'.
-
-A signaling bit value of '1' SHALL indicate support of a fork and
-SHALL count towards its tally on a chain.
-
-A signaling bit value of '0' SHALL indicate absence of support of a
-fork and SHALL NOT count towards its tally on a chain.
-
-The signaling bits SHALL be tallied whenever the head of the active
-chain changes (including after reorganizations).
-
-### State transitions
-
-The following diagram illustrates the generalized state machine:
-
-![State transactions](../assets/ecip-1022/bip-0135-states-small.png)
-
-The genesis block of any chain SHALL have the state DEFINED for each
-deployment.
-
-A given deployment SHALL remain in the DEFINED state until it either
-passes the start (and becomes STARTED) or the timeout time (and
-becomes FAILED).
-
-Once a deployment has STARTED, the signal for that deployment SHALL be
-tallied over the the past windowsize blocks whenever a new block is
-received on that chain.
-
-A transition from the STARTED state to the LOCKED_IN state SHALL only
-occur when all of these are true:
-
-* The height of the received block is an integer multiple of the
-  window size
-* The current block number is below (start + timeout)
-* At least threshold out of windowsize blocks have signaled support
-
-A similar height synchronization precondition SHALL exist for the
-transition from LOCKED_IN to ACTIVE. These synchronization conditions
-are expressed by the "mod(height, windowsize) = 0" clauses in the
-diagram.
-
-A transition from LOCKED_IN to ACTIVE state SHALL only occur if the
-height synchronization criterion is met and the below configurable
-'grace period' conditions are fulfilled:
-
-* Current height MUST be at least minlockedblocks above LOCKED_IN
-  height
-
-NOTE: If minlockedblocks is set to 0, then the fork will proceed
-directly to ACTIVE state once the chain height reaches a multiple of
-the windowsize.
-
-The ACTIVE and FAILED states are terminal; a deployment stays in these
-states once they are reached.
-
-Deployment states are maintained along block chain branches. They need
-re-computation when a reorganization happens.
-
-### New consensus rules
-
-New consensus rules deployed by a fork SHALL be enforced for each
-block that has ACTIVE state.
-
-### Optional operator notifications
-
-An implementation SHOULD notify the operator when a deployment
-transitions to STARTED, LOCKED_IN, ACTIVE or FAILED states.
-
-It is RECOMMENDED that an implementation provide finer-grained
-notifications to the operator which allow him/her to track the
-measured support level for defined deployments.
-
-An implementation SHOULD warn the operator if the configured (emitted)
-nVersion has been overridden to contain bits set to '1' in
-contravention of the above non-signaling recommendations for DEFINED
-forks.
-
-It is RECOMMENDED that an implementation warn the operator if no
-signal has been received for a given deployment during a full
-windowsize period after the deployment has STARTED. This could
-indicate that something may be wrong with the operator's configuration
-that is causing them not to receive the signal correctly.
-
-For undefined signals, it is RECOMMENDED that implementation track
-these and alert their operators with supportive upgrade notifications,
-e.g.
-
-* "warning: signaling started on unknown feature on version bit X"
-* "warning: signaling on unknown feature reached X% (over last N
-  blocks)"
-* "info: signaling ceased on unknown feature (over last M blocks)"
-
-Since parameters of these deployments are unknown, it is RECOMMENDED
-that implementations allow the user to configure the emission of such
-notifications (e.g. suitable N and M parameters in the messages above,
-e.g. a best-guess window of 100 blocks).
-
-## Rationale
-
-The timeout into FAILED state allows eventual reuse of bits if a fork
-was not successfully activated.
-
-A fallow period at the conclusion of a fork attempt allows some
-detection of buggy clients, and allows time for warnings and software
-upgrades for successful forks. The duration of a fallow period is not
-specified by this proposal, although a conventional fallow period of 3
-months is RECOMMENDED.
-
-## Guidelines
-
-### Parameter selection guidelines
-
-The following guidelines are suggested for selecting the parameters
-for a fork:
-
-* **name** SHOULD be selected such that no two forks, concurrent or
-  otherwise, ever use the same name.
-* **bit** SHOULD be selected such that no two concurrent forks use the
-  same bit. Implementors should make an effort to consult resources
-  such as [2] to establish whether the bit they wish to use can
-  reasonably be assumed to be unclaimed by a concurrent fork, and to
-  announce their use ('claim') of a bit for a fork purpose on various
-  project mailing lists, to reduce chance of collisions.
-* **start** SHOULD be set to some block number in the future,
-  approximately one month after a software release date which includes
-  the fork signaling.  This allows for some release delays, while
-  preventing triggers as a result of parties running pre-release
-  software.
-* **timeout** is RECOMMENDED to be a block number that is
-  approximately 1 year after start.
-* **windowsize** SHOULD be set large enough to allow reception of an
-  adequately precise signal.
-* **threshold** SHOULD be set as high as possible to ensure a smooth
-  activation based on the estimated support and the nature of the
-  proposed changes. It is strongly RECOMMENDED that threshold >=
-  windowsize / 2 (rounded up) to ensure that a proposal is only
-  activated by majority support.
-* **minlockedblocks** is RECOMMENDED to be set >= windowsize, to
-  ensure that a full window passes in LOCKED_IN state. Lower values
-  will be ineffective as the transition from LOCKED_IN to ACTIVE is
-  guarded by a synchronization based on the window size.
-
-NOTE: If minlockedblocks is set to 0, then the fork will proceed to
-ACTIVE state when the chain height reaches a multiple of the
-windowsize.
-
-A later deployment using the same bit is possible as long as the
-starttime is after the previous fork's timeout or activation, but it
-is discouraged until necessary, and even then recommended to have a
-pause in between to detect buggy software.
-
-### Signaling guidelines
-
-An implementation SHOULD signal '0' on a bit if one of the following
-holds true:
-
-* The deployment parameters are not DEFINED (not configured or
-  explicitly undefined)
-* The deployment is DEFINED and has not yet reached the STARTED state
-* The deployment has succeeded (it has become ACTIVE)
-* The deployment has FAILED
-
-An implementation SHOULD enable the operator to choose (override)
-whether to signal '0' or '1' on a bit, once its deployment has at
-least reached the STARTED state.
-
-A supporting miner SHOULD signal '1' on a bit for which the deployment
-is LOCKED_IN state so that uptake is visible. However, this has no
-effect on consensus rules. Once LOCKED_IN, a deployment proceeds to
-ACTIVE solely based on the configured grace period parameters (see
-'Fork deployment parameters' above).
-
-A miner SHOULD signal '0' on a bit if they wish to suspend signaling
-of support for a fork that is DEFINED in their software.
-
-It is NOT RECOMMENDED to signal '1' for bits where the meaning is
-undefined (i.e. bits which are unclaimed by proposals).
-
-## References
-
-This ECIP is a realization of
-[27-MINERVOTE](https://specs.that.world/27-minervote/).
-
-## License
-
-This work is licensed under [Apache License, Version
-2.0](http://www.apache.org/licenses/).
diff --git a/_specs/ecip-1025.md b/_specs/ecip-1025.md
deleted file mode 100644
index 9145cfce..00000000
--- a/_specs/ecip-1025.md
+++ /dev/null
@@ -1,168 +0,0 @@
----
-lang: en
-ecip: 1025
-title: Precompiled Contracts for zkSNARK Verification
-author: Wei Tang <hi@that.world>
-status: Draft
-type: Standards Track
-category: Core
-created: 2017/06/29
----
-
-## Motivation
-
-Precompiled contracts for elliptic curve and pairing operations are required in order to perform zkSNARK verification within the block gas limit.
-
-## Abstract
-
-zkSNARK verification will allow anonymous transaction to be executed on the Ethereum Classic network. See [this](https://github.com/zcash/babyzoe/blob/master/zoe/contract/mixer.sol) for how a simple mixer contract can be implemented using zkSNARK verification. This ECIP implements three primitive operations in order to perform zkSNARK verification. This allows changes of zkSNARK algorithms without requiring another hard fork.
-
-The general benefit of zkSNARKs for Ethereum and Ethereum Classic is that it will increase the privacy for users (because of the Zero-Knowledge property) and might also be a scalability solution (because of the succinctness and efficient verifiability property).
-
-This combines [EIP-212](https://github.com/ethereum/EIPs/pull/212) and [EIP-213](https://github.com/ethereum/EIPs/pull/213).
-
-## Specification for Addition and Scalar Multiplication on the Elliptic Curve alt_bn128
-
-Add precompiled contracts for point addition (ADD)  and scalar multiplication (MUL) on the elliptic curve "alt_bn128".
-
-Address of ADD: 0x6
-Address for MUL: 0x7
-
-The curve is defined by:
-```
-Y^2 = X^3 + 3
-over the field F_p with
-p = 21888242871839275222246405745257275088696311157297823662689037894645226208583
-```
-
-### Encoding
-
-Field elements and scalars are encoded as 32 byte big-endian numbers. Curve points are encoded as two field elements `(x, y)`, where the point at infinity is encoded as `(0, 0)`.
-
-Tuples of objects are encoded as their concatenation.
-
-For both precompiled contracts, if the input is shorter than expected, it is assumed to be virtually padded with zeros at the end (i.e. compatible with the semantics of the `CALLDATALOAD` opcode). If the input is longer than expected, surplus bytes at the end are ignored.
-
-The length of the returned data is always as specified (i.e. it is not "unpadded"). 
-
-### Exact semantics
-
-Invalid input: For both contracts, if any input point does not lie on the curve or any of the field elements (point coordinates) is equal or larger than the field modulus p, the contract fails. The scalar can be any number between `0` and `2**256-1`.
-
-#### ADD
-Input: two curve points `(x, y)`.
-Output: curve point `x + y`, where `+` is point addition on the elliptic curve `alt_bn128` specified above.
-Fails on invalid input and consumes all gas provided.
-
-#### MUL
-Input: curve point and scalar `(x, s)`.
-Output: curve point `s * x`, where `*` is the scalar multiplication on the elliptic curve `alt_bn128` specified above.
-Fails on invalid input and consumes all gas.
-
-### Gas costs
-
-To be determined.
-
-### Specification for Optimal Ate Pairing Check on the Elliptic Curve alt_bn128
-
-Add a precompiled contracts for a bilinear function on groups on the elliptic curve "alt_bn128". We will define the precompiled contract in terms of a discrete logarithm. The discrete logarithm is of course assumed to be hard to compute, but we will give an equivalent specification that makes use of elliptic curve pairing functions which can be efficiently computed below.
-
-Address: 0x8
-
-For a cyclic group `G` (written additively) of prime order q let `log_P: G -> F_q` be the discrete logarithm on this group with respect to a generator `P`, i.e. `log_P(x)` is the integer `n` such that `n * P = x`.
-
-The precompiled contract is defined as follows, where the two groups `G_1` and `G_2` and their generators `P_1` and `P_2` are defined below (they have the same order `q`):
-
-```
-Input: (a1, b1, a2, b2, ..., ak, bk) from (G_1 x G_2)^k
-Output: If the length of the input is incorrect or any of the inputs are not elements of
-        the respective group or are not encoded correctly, the call fails.
-        Otherwise, return one if
-        log_P1(a1) * log_P2(b1) + ... + log_P1(ak) * log_P2(bk) = 0
-        (in F_q) and zero else.
-```
-
-Note that `k` is determined from the length of the input. `k == 0` is valid and results in returning one.
-
-In order to check that an input is an element of `G_1`, verifying the encoding of the coordinates and checking that they satisfy the curve equation (or is the encoding of infinity) is sufficient. For `G_2`, in addition to that, the order of the element has to be checked to be equal to the group order `q = 21888242871839275222246405745257275088548364400416034343698204186575808495617`.
-
-### Definition of the groups
-
-The groups `G_1` and `G_2` are cyclic groups of prime order `q = 21888242871839275222246405745257275088548364400416034343698204186575808495617` on the elliptic curve `alt_bn128` defined by the curve equation
-`Y^2 = X^3 + 3`.
-
-The group `G_1` is a cyclic group on the above curve over the field `F_p` with `p = 21888242871839275222246405745257275088696311157297823662689037894645226208583` with generator `P1 = (1, 2)`.
-
-The group `G_2` is a cyclic group on the same elliptic curve over a different field `F_p^2 = F_p[i] / (i^2 + 1)` (p is the same as above) with generator
-```
-P2 = (
-  11559732032986387107991004021392285783925812861821192530917403151452391805634 * i +
-  10857046999023057135944570762232829481370756359578518086990519993285655852781,
-  4082367875863433681332203403145435568316851327593401208105741076214120093531 * i +
-  8495653923123431417604973247489272438418190587263600148770280649306958101930
-)
-```
-
-
-### Encoding
-
-Elements of `F_p` are encoded as 32 byte big-endian numbers. An encoding value of `p` or larger is invalid.
-
-Elements `a * i + b` of `F_p^2` are encoded as two elements of `F_p`, `(a, b)`.
-
-Elliptic curve points are encoded as a Jacobian pair `(X, Y)` where the point at infinity is encoded as `(0, 0)`.
-
-Note that the number `k` is derived from the input length.
-
-The length of the returned data is always exactly 32 bytes and encoded as a 32 byte big-endian number. 
-
-### Gas costs
-
-[Benchmarks run on cpp-ethereum](https://gist.github.com/chriseth/4168b56bfe638cae8da1945dd988600b)
-
-suggest the following gas formula:
-
-`60000 * k + 40000`
-
-if we target 20000 gas per millisecond.
-
-Awaiting benchmarks from other implementations.
-
-## Rationale
-
-The specific curve `alt_bn128` was chosen because it is particularly well-suited for zkSNARKs, or, more specifically their verification building block of pairing functions. Furthermore, by choosing this curve, we can use synergy effects with ZCash and re-use some of their components and artifacts.
-
-The feature of adding curve and field parameters to the inputs was considered but ultimately rejected since it complicates the specification: The gas costs are much harder to determine and it would be possible to call the contracts on something which is not an actual elliptic curve.
-
-A non-compact point encoding was chosen since it still allows to perform some operations in the smart contract itself (inclusion of the full y coordinate) and two encoded points can be compared for equality (no third projective coordinate).
-
-## Backwards Compatibility
-
-As with the introduction of any precompiled contract, contracts that already use the given addresses will change their semantics. Because of that, the addresses are taken from the "reserved range" below 256.
-
-## Implementation
-
-### Optional Ate Pairing Check
-
-The precompiled contract can be implemented using elliptic curve pairing functions, more specifically, an optimal ate pairing on the alt_bn128 curve, which can be implemented efficiently. In order to see that, first note that a pairing function `e: G_1 x G_2 -> G_T` fulfills the following properties (`G_1` and `G_2` are written additively, `G_T` is written multiplicatively):
-
-(1) `e(m * P1, n * P2) = e(P1, P2)^(m * n)`
-(2) `e` is non-degenerate
-
-Now observe that
-```
-log_P1(a1) * log_P2(b1) + ... + log_P1(ak) * log_P2(bk) = 0
-```
-if and only if
-```
-e(P1, P2)^(log_P1(a1) * log_P2(b1) + ... + log_P1(ak) * log_P2(bk)) = e(P1, P2)
-```
-
-Furthermore, the left hand side of this equation is equal to
-```
-e(log_P1(a1) * P1, log_P2(b1) * P2) * ... * e(log_P1(ak) * P1, log_P2(bk) * P2)
-= e(a1, b1) * ... * e(ak, bk)
-```
-
-And thus, the precompiled contract can be implemented by verifying that
-`e(a1, b1) * ... * e(ak, bk) = e(P1, P2)`
diff --git a/_specs/ecip-1026.md b/_specs/ecip-1026.md
deleted file mode 100644
index 47077d32..00000000
--- a/_specs/ecip-1026.md
+++ /dev/null
@@ -1,94 +0,0 @@
----
-lang: en
-ecip: 1026
-title: Modexp Precompiled Contract
-author: Wei Tang <hi@that.world>
-status: Draft
-type: Standards Track
-category: Core
-created: 2017-06-28
----
-    
-## Rationale
-
-This allows for efficient RSA verification inside of the EVM, as well as other forms of number theory-based cryptography. Note that adding precompiles for addition and subtraction is not required, as the in-EVM algorithm is efficient enough, and multiplication can be done through this precompile via `a * b = ((a + b)**2 - (a - b)**2) / 4`.
-
-The bit-based exponent calculation is done specifically to fairly charge for the often-used exponents of 2 (for multiplication) and 3 and 65537 (for RSA verification).
-
-## Specification
-
-### Parameters
-
-* `GQUADDIVISOR: 100`
-
-### Algorithm
-
-At address 0x00......05, add a precompile that expects input in the following format:
-
-    <length_of_BASE> <length_of_EXPONENT> <length_of_MODULUS> <BASE> <EXPONENT> <MODULUS>
-    
-Where every length is a 32-byte left-padded integer representing the number of bytes to be taken up by the next value. Call data is assumed to be infinitely right-padded with zero bytes, and excess data is ignored. Consumes `floor(max(length_of_MODULUS, length_of_BASE) ** 2 * max(ADJUSTED_EXPONENT_LENGTH, 1) / GQUADDIVISOR)` gas, and if there is enough gas, returns an output `(BASE**EXPONENT) % MODULUS` as a byte array with the same length as the modulus.
-
-`ADJUSTED_EXPONENT_LENGTH` is defined as follows.
-
-* If `length_of_EXPONENT <= 32`, and all bits in `EXPONENT` are 0, return 0
-* If `length_of_EXPONENT <= 32`, then return the index of the highest bit in `EXPONENT` (eg. 1 -> 0, 2 -> 1, 3 -> 1, 255 -> 7, 256 -> 8).
-* If `length_of_EXPONENT > 32`, then return `8 * (length_of_EXPONENT - 32)` plus the index of the highest bit in the first 32 bytes of `EXPONENT` (eg. if `EXPONENT = \x00\x00\x01\x00.....\x00`, with one hundred bytes, then the result is 8 * (100 - 32) + 253 = 797). If all of the first 32 bytes of `EXPONENT` are zero, return exactly `8 * (length_of_EXPONENT - 32)`.
-
-For example, the input data:
-
-    0000000000000000000000000000000000000000000000000000000000000001
-    0000000000000000000000000000000000000000000000000000000000000020
-    0000000000000000000000000000000000000000000000000000000000000020
-    03
-    fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2e
-    fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f
-    
-Represents the exponent `3**(2**256 - 2**32 - 978) % (2**256 - 2**32 - 977)`. By Fermat's little theorem, this equals 1, so the result is:
-
-    0000000000000000000000000000000000000000000000000000000000000001
-    
-Returned as 32 bytes because the modulus length was 32 bytes. The `ADJUSTED_EXPONENT_LENGTH` would be 255, and the gas cost would be `32**2 * 255 / 100 = 2611` gas (note that this is ~five thirds of the cost of using the EXP opcode to compute a 32-byte exponent). A 4096-bit RSA exponentiation would cost `512**2 * 4095 / 100 = 10734796` gas in the worst case, though RSA verification in practice usually uses an exponent of 3 or 65537, which would reduce the gas consumption to 2621 or 41943, respectively.
-
-This input data:
-
-    0000000000000000000000000000000000000000000000000000000000000000
-    0000000000000000000000000000000000000000000000000000000000000020
-    0000000000000000000000000000000000000000000000000000000000000020
-    fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2e
-    fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f
-    
-Would be parsed as a base of 0, exponent of `2**256 - 2**32 - 978` and modulus of `2**256 - 2**32 - 978`, and so would return 0. Notice how if the length_of_BASE is 0, then it does not interpret _any_ data as the base, instead immediately interpreting the next 32 bytes as length_of_EXPONENT.
-
-This input data:
-
-    0000000000000000000000000000000000000000000000000000000000000000
-    0000000000000000000000000000000000000000000000000000000000000020
-    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-    fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe
-    fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd
-    
-Would parse a base length of 0, a modulus length of 32, and an exponent length of `2**256 - 1`, where the base is empty, the modulus is `2**256 - 2` and the exponent is `(2**256 - 3) * 256**(2**256 - 33)` (yes, that's a really big number). It would then immediately fail, as it's not possible to provide enough gas to make that computation.
-
-This input data:
-
-    0000000000000000000000000000000000000000000000000000000000000001
-    0000000000000000000000000000000000000000000000000000000000000002
-    0000000000000000000000000000000000000000000000000000000000000020
-    03
-    ffff
-    8000000000000000000000000000000000000000000000000000000000000000
-    07
-
-Would parse as a base of 3, an exponent of 65535, and a modulus of `2**255`, and it would ignore the remaining 0x07 byte.
-
-This input data:
-
-    0000000000000000000000000000000000000000000000000000000000000001
-    0000000000000000000000000000000000000000000000000000000000000002
-    0000000000000000000000000000000000000000000000000000000000000020
-    03
-    ffff
-    80
-    
-Would also parse as a base of 3, an exponent of 65535 and a modulus of `2**255`, as it attempts to grab 32 bytes for the modulus starting from 0x80, but then there is no further data so it right pads it with 31 zeroes.
diff --git a/_specs/ecip-1036.md b/_specs/ecip-1036.md
deleted file mode 100644
index 44396c9e..00000000
--- a/_specs/ecip-1036.md
+++ /dev/null
@@ -1,31 +0,0 @@
----
-lang: en
-ecip: 1036
-title: Fallback Complete Difficulty Bomb Diffusion
-author: Wei Tang <hi@that.world>
-status: Draft
-type: Standards Track
-category: Core
-created: 2017-09-06
----
-    
-### Abstract
-
-This ECIP describes a fallback plan if an extension of ECIP-1010 does not activate. If that is the case, then completely diffuse the difficulty bomb at block 5452163.
-    
-### Motivation
-
-There is currently a small probability that [an extension of ECIP-1010](https://github.com/ethereumproject/ECIPs/issues/63) might not be able to be activated. The probability is really slight, but it is still possible. Please see the discussion of that issue for reasonings from different parties. This ECIP provides a fallback plan, to give assurance for those who might be impantient or worried of the difficulty bomb, so as to avoid a possible community split or an unexcepted hard fork.
-
-Block 5452163 is chosen as the fork block number. This is a totally arbitrary and meaningless number. In this way, we avoid collisions of the fork block number with other protocol upgrade hard forks.
-
-### Specification
-
-If [an extension of ECIP-1010](https://github.com/ethereumproject/ECIPs/issues/63) is rejected, at block 5452163, change the difficulty calculation formula to:
-
-```
-block_diff = parent_diff 
-     + parent_diff / 2048 * max(1 - (block_timestamp - parent_timestamp) / 10, -99) 
-```
-
-That is, remove the `int(2**explosion)` part from the formula in ECIP-1010.
diff --git a/_specs/ecip-1040.md b/_specs/ecip-1040.md
deleted file mode 100644
index 2e5fba89..00000000
--- a/_specs/ecip-1040.md
+++ /dev/null
@@ -1,239 +0,0 @@
----
-lang: en
-ecip: 1040
-title: Generalized Account Versioning Scheme
-author: Wei Tang (@sorpaas)
-discussions-to: https://github.com/ethereumclassic/ECIPs/issues/169
-status: Draft
-type: Standards Track
-category: Core
-created: 2017-12-30
-license: Apache-2.0
----
-
-## Simple Summary
-
-Introduce account versioning for smart contracts so upgrading the VM
-or introducing new VMs can be easier.
-
-## Abstract
-
-This defines a method of hard forking while maintaining the exact
-functionality of existing account by allowing multiple versions of the
-virtual machines to execute in the same block. This is also useful to
-define future account state structures when we introduce the on-chain
-WebAssembly virtual machine.
-
-## Motivation
-
-By allowing account versioning, we can execute different virtual
-machine for contracts created at different times. This allows breaking
-features to be implemented while making sure existing contracts work
-as expected.
-
-Note that this specification might not apply to all hard forks. We
-have emergency hard forks in the past due to network attacks. Whether
-they should maintain existing account compatibility should be
-evaluated in individual basis. If the attack can only be executed once
-against some particular contracts, then the scheme defined here might
-still be applicable. Otherwise, having a plain emergency hard fork
-might still be a good idea.
-
-## Specification
-
-### Account State
-
-Re-define account state stored in the world state trie to have 5
-items: `nonce`, `balance`, `storageRoot`, `codeHash`, and
-`version`. The newly added field `version` is a 256-bit **scalar**. We
-use the definition of "scalar" from Yellow Paper. Note that this is
-the same type as `nonce` and `balance`, and it is equivalent to a RLP
-variable-sized byte array with no leading zero, of maximum length 32.
-
-When `version` is zero, the account is RLP-encoded with the first 4
-items. When `version` is not zero, the account is RLP-encoded with 5
-items.
-
-Account versions can also optionally define additional account state
-RLP fields, whose meaning are specified through its `version`
-field. In those cases, the parsing strategy is defined in "Additional
-Fields in Account State RLP" section.
-
-### Contract Execution
-
-When fetching an account code from state, we always fetch the
-associated version field together. We refer to this as the *code's
-version* below. The code of the account is always executed in the
-*code's version*.
-
-In particular, this means that for `DELEGATECALL` and `CALLCODE`, the
-version of the execution call frame is the same as
-delegating/receiving contract's version.
-
-### Contract Deployment
-
-In Ethereum, a contract has a deployment method, either by a contract
-creation transaction, or by another contract. If we regard this
-deployment method a contract's *parent*, then we find them forming a
-family of contracts, with the *root* being a contract creation
-transaction.
-
-We let a family of contracts to always have the same `version`. That
-is, `CREATE` and `CREATE2` will always deploy contract that has the
-same `version` as the *code's version*.
-
-In other words, `CREATE` and `CREATE2` will execute the init code
-using the current *code's version*, and deploy the contract of the
-current *code's version*. This holds even if the to-be-deployed code
-is empty.
-
-### Validation
-
-A new phrase, *validation* is added to contract deployment (by
-`CREATE` / `CREATE2` opcodes, or by contract creation
-transaction). When `version` is `0`, the phrase does nothing and
-always succeeds. Future VM versions can define additional validation
-that has to be passed.
-
-If the validation phrase fails, deployment does not proceed and return
-out-of-gas.
-
-### Contract Creation Transaction
-
-Define `LATEST_VERSION` in a hard fork to be the latest supported VM
-version. A contract creation transaction is always executed in
-`LATEST_VERSION` (which means the *code's version* is
-`LATEST_VERSION`), and deploys contracts of `LATEST_VERSION`. Before a
-contract creation transaction is executed, run *validation* on the
-contract creation code. If it does not pass, return out-of-gas.
-
-### Precompiled Contract and Externally-owned Address
-
-Precompiled contracts and externally-owned addresses do not have
-`version`. If a message-call transaction or `CALL` / `CALLCODE` /
-`STATICCALL` / `DELEGATECALL` touches a new externally-owned address
-or a non-existing precompiled contract address, it is always created
-with `version` field being `0`.
-
-### Additional Fields in Account State RLP
-
-In the future we may need to associate more information into an
-account, and we already have some EIP/ECIPs that define new additional
-fields in the account state RLP. In this section, we define the
-parsing strategy when additional fields are added.
-
-* Check the RLP list length, if it is 4, then set account version to
-  `0`, and do not parse any additional fields.
-* If the RLP list length more than 4, set the account version to the
-  scalar at position `4` (counting from `0`).
-  * Check version specification for the number of additional fields
-    defined `N`, if the RLP list length is not equal to `5 + N`,
-    return parse error.
-  * Parse RLP position `5` to `4 + N` as the meaning specified in
-    additional fields.
-  
-## Extensions
-
-In relation to the above "Specification" section, we have defined the
-base account versioning layer. The base account versioning layer is
-already useful by itself and can handle most EVM improvements. Below
-we define two specifications that can be deployed separately, which
-improves functionality of base layer account versioning.
-
-Note that this section is provided only for documentation
-purpose. When "enabling ECIP-1040", those extensions should not be
-enabled unless the extension EIP is also included.
-
-- [ECIP-1068: Account Versioning Extension for Contract Creation
-  Transaction](./ecip-1068.md)
-- [ECIP-1069: Account Versioning Extension for CREATE and
-  CREATE2](./ecip-1069.md)
-
-## Usage Template
-
-This section defines how other ECIPs might use this account versioning
-ECIP. Note that currently we only define the usage template for base
-layer.
-
-Account versioning is usually applied directly to a hard fork meta
-ECIP. ECIPs in the hard fork are grouped by the virtual machine type,
-for example, EVM and eWASM. For each of them, we define:
-
-* **Version**: a non-zero scalar less than `2^256` that uniquely
-  identifies this version. Note that it does not need to be
-  sequential.
-* **Parent version**: the base that all new features derived
-  from. With parent version of `0` we define the base to be legacy
-  VM. Note that once a version other than `0` is defined, the legacy
-  VM's feature set must be frozen. When defining an entirely new VM
-  (such as eWASM), parent version does not apply.
-* **Features**: all additional features that are enabled upon this
-  version.
-
-If a meta ECIP includes ECIPs that provide additional account state RLP
-fields, we also define:
-
-* **Account fields**: all account fields up to the end of this meta
-  EIP, excluding the basic 5 fields (`nonce`, `balance`,
-  `storageRoot`, `codeHash` and `version`). If EIPs included that are
-  specific to modifying account fields do not modify VM execution
-  logic, it is recommended that we specify an additional version whose
-  execution logic is the same as previous version, but only the
-  account fields are changed.
-
-## Rationale
-
-This introduces account versioning via a new RLP item in account
-state. The design above gets account versioning by making the contract
-*family* always have the same version. In this way, versions are only
-needed to be provided by contract creation transaction, and there is
-no restrictions on formats of code for any version. If we want to
-support multiple newest VMs (for example, EVM and WebAssembly running
-together), then this will requires extensions such as ECIP-1068 and
-ECIP-1069.
-
-Alternatively, account versioning can also be done through:
-
-* **[26-VER](https://specs.that.world/26-ver/)** and
-  **[40-UNUSED](https://specs.that.world/40-unused/)**: This makes an
-  account's versioning soly dependent on its code header prefix. If
-  with only EIP-1707, it is not possible to certify any code is valid,
-  because current VM allows treating code as data. This can be fixed
-  by EIP-1712, but the drawback is that it's potentially backward
-  incompatible.
-* **EIP-1891**: Instead of writing version field into account RLP
-  state, we write it in a separate contract. This can accomplish the
-  same thing as this EIP and potentially reduces code complexity, but
-  the drawback is that every code execution will require an additional
-  trie traversal, which impacts performance.
-
-## Backwards Compatibility
-
-Account versioning is fully backwards compatible, and it does not
-change how current contracts are executed.
-
-## Discussions
-
-### Performance
-
-Currently nearly all full node implementations uses config parameters
-to decide which virtual machine version to use. Switching virtual
-machine version is simply an operation that changes a pointer using a
-different set of config parameters. As a result, this scheme has
-nearly zero impact to performance.
-
-### WebAssembly
-
-This scheme can also be helpful when we deploy on-chain WebAssembly
-virtual machine. In that case, WASM contracts and EVM contracts can
-co-exist and the execution boundary and interaction model are clearly
-defined as above.
-
-## Test Cases and Implementations
-
-To be added.
-
-## Copyright
-
-This work is licensed under [Apache License, Version
-2.0](http://www.apache.org/licenses/).
diff --git a/_specs/ecip-1065.md b/_specs/ecip-1065.md
deleted file mode 100644
index 1ac3526b..00000000
--- a/_specs/ecip-1065.md
+++ /dev/null
@@ -1,84 +0,0 @@
----
-lang: en
-ecip: 1065
-title: Kunming EVM and Protocol Upgrades
-status: Draft
-type: Meta
-author: Wei Tang <hi@that.world>
-created: 2019-10-05
----
-
-### Simple Summary
-
-This protocol upgrade provides a backward compatibility foundation to
-enable future protocol upgrades to be applied with significantly lower
-chance of breaking existing contracts.
-
-### Abstract
-
-This document proposes the following blocks at which to implement the
-changes specified in "Specification" section.
-
-- Undecided on Ethereum Classic PoW-mainnet.
-
-### Specification
-
-At hard fork block, enable [EIP-1702](https://eips.ethereum.org/EIPS/eip-1702):
-
-* Define the previous EVM version as version `0`.
-* Define a new version `1`, with the following EVM modifications
-  applied on it.
-  * **[39-UNGAS](https://specs.that.world/39-ungas/)**: Remove all
-    observable behavior of gas cost in EVM and change out-of-gas
-    exception to trap the whole transaction.
-  * **[40-UNUSED](https://specs.that.world/40-unused/)**: Disable
-    deployment of unused opcodes.
-  
-### Discussion
-
-#### Feature Upgrades
-
-Once the hard fork is enabled, future feature upgrades can be applied
-directly on version `1`, without the need to define additional new
-versions. This simplifies client maintainence, which was one of the
-main resistence to apply EIP-1702 in Istanbul.
-
-Any gas cost changes can be applied without worry about backward
-compatibility issues, because gas cost is now an unobservable behavior
-in EVM. Any addition of opcodes can be applied without worry about
-backward compatibility issues, because deployment of unused opcode is
-disabled. This nearly covers all EVM upgrade paths we need to care
-about.
-
-#### Ecosystem
-
-It is possible to deploy a helper contract to allow version `0`
-contracts continue to be created. This allows unmodified Solidity code
-to be deployed, just like what we have now.
-
-However, for version `1`, because we made several changes related to
-gas cost, which impacts the semantics of certain opcodes such as
-`CALL*` and `CREATE*`, Solidity compiler must be modified to support
-version `1`.
-
-Existing common practices might need to change as well. Some practices
-relies on the observable behavior of gas cost. Relying on gas cost is
-usually considered to be a bad practice because gas cost can and will
-change.
-
-On the other hand, version `1` enables some new practices that wasn't
-possible before. For example, a contract can now refuse to be invoked
-by any other contracts.
-
-#### Emergency Hard Fork
-
-Our current gas cost scheme might contain DoS attack vectors. If those
-attack vectors must be fixed by changing existing gas cost schemes,
-then it must change gas costs specified in version `0`. In those
-emergency hard fork scenarios, we will inevitably break backward
-compatibility.
-
-## License
-
-This work is licensed under [Apache License, Version
-2.0](http://www.apache.org/licenses/).
diff --git a/_specs/ecip-1066.md b/_specs/ecip-1066.md
deleted file mode 100644
index 4fe9a470..00000000
--- a/_specs/ecip-1066.md
+++ /dev/null
@@ -1,24 +0,0 @@
----
-lang: en
-ecip: 1066
-title: Ethereum Classic Network Description
-status: Active
-type: Meta
-author: Wei Tang (@sorpaas)
-created: 2019-10-07
----
-
-This document records feature upgrades that have been applied in
-Ethereum Classic network mainnet.
-
-| Block Number | Specification                                                  |
-| ------------ | -------------------------------------------------------------- |
-| 0            | [EIP-684](https://github.com/ethereum/EIPs/issues/684)         |
-| 1,150,000    | [EIP-606](https://eips.ethereum.org/EIPS/eip-606)              |
-| 2,500,000    | [ECIP-1015](https://ecips.ethereumclassic.org/ECIPs/ecip-1015) |
-| 3,000,000    | [ECIP-1010](https://ecips.ethereumclassic.org/ECIPs/ecip-1010) |
-| 3,000,000    | [EIP-160](https://eips.ethereum.org/EIPS/eip-160)              |
-| 5,000,000    | [ECIP-1017](https://ecips.ethereumclassic.org/ECIPs/ecip-1017) |
-| 5,000,000    | [ECIP-1039](https://ecips.ethereumclassic.org/ECIPs/ecip-1039) |
-| 5,900,000    | [ECIP-1041](https://ecips.ethereumclassic.org/ECIPs/ecip-1041) |
-| 8,772,000    | [ECIP-1054](https://ecips.ethereumclassic.org/ECIPs/ecip-1054) |
diff --git a/_specs/ecip-1068.md b/_specs/ecip-1068.md
deleted file mode 100644
index b8856664..00000000
--- a/_specs/ecip-1068.md
+++ /dev/null
@@ -1,72 +0,0 @@
----
-lang: en
-ecip: 1068
-title: Account Versioning Extension for Contract Creation Transaction
-author: Wei Tang (@sorpaas)
-discussions-to: https://github.com/ethereumclassic/ECIPs/issues/169
-status: Draft
-type: Standards Track
-category: Core
-created: 2019-06-24
-requires: 1040
-license: Apache-2.0
----
-
-## Simple Summary
-
-Specification for an extension of ECIP-1040 to allow contract creation
-transaction to create multiple versions.
-
-## Abstract
-
-This ECIP defines an extension to the base layer of account versioning
-(ECIP-1040) to allow multiple account versions to be used in contract
-creation transaction. Although this is not necessary at this moment,
-it will once we have multiple independent VMs (such as eWasm).
-
-## Motivation
-
-The base account versioning layer only allows contract of the
-newest version to be deployed via contract creation transaction. This
-is a reasonable assumption for current Ethereum network, because most
-of new features added to EVM are additions, and developers almost
-never want to deploy contracts that are not of the newest version. In
-this section, we provide an extension to allow multiple versions of
-contracts to be deployed via contract creation transaction.
-
-## Specification
-
-Add an additional field `version` (256-bit integer) in contract
-creation transaction. So it becomes `nonce`, `gasprice`, `startgas`,
-`to`, `value`, `data`, `v`, `r`, `s`, `version`. When signing or
-recovering, sign ten items, with `v`, `r`, `s` as defined by EIP-155.
-
-The transaction would be executed with the *code's version* in
-`version` supplied, and deploys contract of `version`. If `version` is
-not supported or *validation* does not pass, return out-of-gas.
-
-## Rationale
-
-By providing the additional field `version`, a contract creation
-transaction can specify which version it wants to deploy. In case of
-two independent VMs such as EVM and eWASM, we can allow two
-`LATEST_VERSION`s to be specified -- one for EVM and another for
-eWASM. Both of them then can deploy new contracts via transactions.
-
-## Backwards Compatibility
-
-This ECIP only changes transaction formats and does not change any VM
-execution logic, thus it has no backwards compatibility issue.
-
-## Test Cases
-
-Not yet provided.
-
-## Implementation
-
-Not yet implemented.
-
-## Copyright
-
-This work is licensed under [Apache License, Version
-2.0](http://www.apache.org/licenses/).
diff --git a/_specs/ecip-1069.md b/_specs/ecip-1069.md
deleted file mode 100644
index b79fc2fe..00000000
--- a/_specs/ecip-1069.md
+++ /dev/null
@@ -1,78 +0,0 @@
----
-lang: en
-ecip: 1069
-title: Account Versioning Extension for CREATE and CREATE2
-author: Wei Tang (@sorpaas)
-discussions-to: https://github.com/ethereumclassic/ECIPs/issues/169
-status: Draft
-type: Standards Track
-category: Core
-created: 2019-06-24
-requires: 1040
-license: Apache-2.0
----
-
-## Simple Summary
-
-Specification for an extension of ECIP-1040 to allow an EVM contract to
-create multiple versions.
-
-## Abstract
-
-This ECIP defines an extension to the base layer of account versioning
-(ECIP-1040) to allow an EVM contract to create sub-contracts of
-multiple versions. Although this is not necessary at this moment, it
-will be a nice-to-have add-on.
-
-## Motivation
-
-The base account versioning layer only allows contracts of the same
-version to be deployed through `CREATE` and `CREATE2`. In this
-section, we provide an extension to allow different versions of
-contracts to be deployed via them, by providing two new opcodes,
-`VCREATE` and `VCREATE2`.
-
-## Specification
-
-Define two new opcodes `VCREATE` and `VCREATE2` at `0xf6` and `0xf7`
-respectively. `VCREATE` takes 4 stack arguments (version, value, input
-offset, input size), and `VCREATE2` takes 5 stack arguments (version,
-endowment, memory_start, memory_length, salt). Note that except the
-stack item `version`, other arguments are the same as `CREATE` and
-`CREATE2`.
-
-The two new opcodes behave identically to `CREATE` and `CREATE2`,
-except that it deploys contracts with version specified by stack item
-`version`.
-
-The network at all times maintains a constant list within the client
-of all deployable versions (which can be different from supported
-versions). Upon `VCREATE` and `VCREATE2`, if the specified `version`
-is not on the list of deployable versions, return out-of-gas.
-
-## Rationale
-
-By providing two additional opcodes `VCREATE` and `VCREATE2`, contract
-developers can deploy new contracts that take advantage of them to
-create new sub-contracts of multiple versions. This may be useful for
-situations like upgradable contracts (while it currently still can be
-done via proxy contacts using only base layer account versioning).
-
-## Backwards Compatibility
-
-This ECIP introduces two new opcodes for EVM runtime. Based on current
-assumed invariants, it should not have any noticeable backward
-compatibility issues.
-
-## Test Cases
-
-Not yet provided.
-
-## Implementation
-
-Not yet implemented.
-
-## Copyright
-
-This work is licensed under [Apache License, Version
-2.0](http://www.apache.org/licenses/).
diff --git a/_specs/ecip-1071.md b/_specs/ecip-1071.md
deleted file mode 100644
index b90f08a1..00000000
--- a/_specs/ecip-1071.md
+++ /dev/null
@@ -1,133 +0,0 @@
----
-lang: en
-ecip: 1071
-title: Methods to Merge Ethereum Blockchains Together
-author: Wei Tang (@sorpaas)
-discussions-to: https://github.com/sorpaas/EIPs/issues/8
-status: Draft
-type: Standards Track
-category: Core
-created: 2019-08-02
-requires: 1040
-license: Apache-2.0
----
-
-This ECIP defines methods that can be adopted to merge two
-Ethereum-like blockchains together.
-
-Note that this ECIP is purely an exploration of technical
-possibilities, and it does not mean the author endorse merging
-Ethereum and Ethereum Classic, or any other two blockchains together.
-
-## Simple Summary
-
-We define methods to merge multiple blockchains together, in a fully
-backward compatible way.
-
-## Abstract
-
-This defines how Ethereum merging can happen, with backward
-compatibility in mind. This is done by utilizing account versioning
-together with transaction replay protection. We also define three
-additional opcodes to allow merged chains to work across two sides of
-state.
-
-## Motivation
-
-There are many reasons why we may want to merge multiple Ethereum
-(eth1.x) blockchains together. For example, there may have been chain
-splits of a blockchain, where later the community issues are resolved,
-and we want to avoid a permanent split due to a temporary issue. It
-may also be two completely distinct blockchains that want to merge in
-order to share proof of work, or to improve inter-chain communication.
-
-## Specification
-
-The merge process happens at fork block, where we have a **merger**
-chain and a **mergee** chain. At fork height, a miner should mine both
-a merger chain's block, and a mergee chain's block. For those two
-blocks:
-
-* Both of them should have no transactions.
-* Merger chain's fork height block and mergee chain's fork height
-  block should have its state root processed as normal.
-* Merger chain's fork height block should set its extra data field to
-  mergee chain's fork height block's state root. The same for mergee
-  chain's fork height block.
-* After mergee chain's fork height block, its proof of work should be
-  abandoned. That is, updated miners should not continue to mine
-  mergee chain any more.
-  
-### State Root
-  
-For the block after merger chain's fork height block, the state root
-meaning is changed to be hash of concatenating merger chain's original
-state root, and mergee chain's original state root.
-
-### Block Rewards
-
-Use merger chain's original block rewards. And mine coinbase always to
-the merger chain's side of the state.
-
-### Transactions and Account Versioning
-
-After merge, transactions with both chain ids are considered valid on
-the merger chain. We define two account versions, one with merger
-chain's original EVM config, and one with mergee chain's original EVM
-config. Accessing accounts originally from either chain should use
-ECIP-1040's account versioning rules. We define how accounts are
-referred on the merged blockchain below:
-
-* For end user interface, prefix `0x01` for accounts on the merger
-  chain, and prefix `0x02` for accounts on the mergee chain.
-* The transaction format is unchanged with addresses using original
-  format. We distinguish whether a transaction operates on merger chain
-  or mergee chain by its chain id. None replay protected transactions
-  must be disabled prior to merging.
-* All original opcodes `CALL*`, `CREATE*` are unchanged, where it only
-  accesses accounts on the same originating chain.
-  
-### Cross the Merger and Mergee Chain Boundary
-
-Define factor `P // Q`, which determines how coins are exchanged on
-merger chain and mergee chain. Define three new opcodes `MCALL`,
-`MCREATE` and `MCREATE2`. They function the same as `CREATE`, `CALL`
-and `CREATE2` with the same gas cost, except that it calls accounts on
-the other side of the state. Values `V` to be exchanged are computed as
-`V * P // Q` from merger side of state to mergee side of state, and
-`V * Q // P` from mergee side of state to merger side of state.
-
-## Rationale
-
-This ECIP accomplishes the chain merge by concatenating two blockchain's
-state root. In clients, this can be represented as a simple depth one
-binary merkle tree where root's left is the merger state, and root's
-right is the mergee state. We use account versioning and transaction
-replay protection to make it backward compatible for full nodes,
-without changing any internal address representation or transaction
-representation. We then define additional opcodes to make two sides
-communicatable.
-
-## Backwards Compatibility
-
-This ECIP is fully backward compatible for EVM and account states. It
-is not backward compatible for light client state proof verification,
-because an additional binary merkle tree is added.
-
-## Test Cases
-
-To be added.
-
-## Implementation
-
-To be added.
-
-## Reference
-
-This specification is a realization of
-[37-MERGE](https://specs.that.world/37-merge/).
-
-## Copyright
-
-This work is licensed under [Apache License, Version
-2.0](http://www.apache.org/licenses/).
diff --git a/_specs/ecip-1072.md b/_specs/ecip-1072.md
deleted file mode 100644
index 179b269c..00000000
--- a/_specs/ecip-1072.md
+++ /dev/null
@@ -1,80 +0,0 @@
----
-lang: en
-ecip: 1072
-title: Yingchun EVM and Protocol Upgrades
-status: Withdrawn
-type: Meta
-author: Wei Tang (@sorpaas)
-created: 2019-11-14
-discussions-to: https://github.com/ethereumclassic/ECIPs/issues/81
-license: Apache-2.0
----
-
-### Simple Summary
-
-Enable the outstanding Ethereum Foundation _Istanbul_ network protocol
-upgrades on the Ethereum Classic network in a hard-fork code-named
-_Yingchun_ to enable maximum compatibility across these networks.
-
-In particular, delay EIP-1884 activation until backward compatibility
-solutions are in place on Ethereum Classic.
-
-### Abstract
-
-Add support for a subset of protocol-impacting changes introduced in
-the Ethereum Foundation (ETH) network via the _Istanbul_
-hardforks.
-
-This document proposes the following blocks at which to implement
-these changes in the Classic networks:
-
-- `TBD` on Mordor Classic PoW-testnet (Feb 5th, 2020)
-- `TBD` on Kotti Classic PoA-testnet (Feb 12th, 2020)
-- `TBD` on Ethereum Classic PoW-mainnet (March 25th, 2020)
-
-For more information on the opcodes and their respective EIPs and
-implementations, please see the _Specification_ section of this
-document.
-
-### Motivation
-
-To enhance the Ethereum Virtual Machine's (EVM) capabilities, various
-opcodes shall be added to the Ethereum Classic networks, all of which
-have been in use on the Ethereum Foundation networks since end of
-2019.
-
-This enables all EIPs in Istanbul, but EIP-1884, due to backward
-compatibility considerations.
-
-### Specification
-
-Enable the following EIPs at the hard fork block:
-
-- [EIP-152](https://eips.ethereum.org/EIPS/eip-152): Add Blake2
-  compression function `F` precompile
-- [EIP-1108](https://eips.ethereum.org/EIPS/eip-1108): Reduce
-  alt_bn128 precompile gas costs
-- [EIP-1344](https://eips.ethereum.org/EIPS/eip-1344): Add ChainID
-  opcode
-- [EIP-2028](https://eips.ethereum.org/EIPS/eip-2028): Calldata gas
-  cost reduction
-- [EIP-2200](https://eips.ethereum.org/EIPS/eip-2200): Rebalance
-  net-metered SSTORE gas cost with consideration of SLOAD gas cost
-  change
-
-### Implementation
-
-Adoption of the content of this ECIP requires a hard fork as it
-introduces changes that are not backward compatible.
-
-The following clients with Ethereum Classic support implement the
-_Istanbul_ features currently:
-
-- Parity Ethereum
-- Multi-Geth
-- Hyperledger Besu
-
-## Copyright
-
-This work is licensed under [Apache License, Version
-2.0](http://www.apache.org/licenses/).
diff --git a/_specs/ecip-1073.md b/_specs/ecip-1073.md
deleted file mode 100644
index 6cf9a3a6..00000000
--- a/_specs/ecip-1073.md
+++ /dev/null
@@ -1,87 +0,0 @@
----
-lang: en
-ecip: 1073
-title: Xichun EVM and Protocol Upgrades
-status: Withdrawn
-type: Meta
-author: Wei Tang (@sorpaas)
-created: 2019-11-14
-discussions-to: https://github.com/ethereumclassic/ECIPs/issues/81
-license: Apache-2.0
----
-
-### Simple Summary
-
-Enable the outstanding Ethereum Foundation _Istanbul_ network protocol
-upgrades on the Ethereum Classic network in a hard-fork code-named
-_Xichun_ to enable maximum compatibility across these networks.
-
-In particular, enables account versioning EIP-1702.
-
-### Abstract
-
-Add support for a subset of protocol-impacting changes introduced in
-the Ethereum Foundation (ETH) network via the _Istanbul_ hardforks.
-
-This document proposes the following blocks at which to implement
-these changes in the Classic networks:
-
-- `TBD` on Mordor Classic PoW-testnet (Feb 5th, 2020)
-- `TBD` on Kotti Classic PoA-testnet (Feb 12th, 2020)
-- `TBD` on Ethereum Classic PoW-mainnet (March 25th, 2020)
-
-For more information on the opcodes and their respective EIPs and
-implementations, please see the _Specification_ section of this
-document.
-
-### Motivation
-
-To enhance the Ethereum Virtual Machine's (EVM) capabilities, various
-opcodes shall be added to the Ethereum Classic networks, all of which
-have been in use on the Ethereum Foundation networks since end of
-2019.
-
-This enables all Istanbul features, feature gated under ECIP-1702 /
-EIP-1702.
-
-### Specification
-
-Enable
-[ECIP-1040](https://ecips.ethereumclassic.org/ECIPs/ecip-1040). Freeze
-features on version `0`. Define a new account version `1`, with the
-following additional EIPs enabled:
-
-- [EIP-152](https://eips.ethereum.org/EIPS/eip-152): Add Blake2
-  compression function `F` precompile
-- [EIP-1108](https://eips.ethereum.org/EIPS/eip-1108): Reduce
-  alt_bn128 precompile gas costs
-- [EIP-1344](https://eips.ethereum.org/EIPS/eip-1344): Add ChainID
-  opcode
-- [EIP-1884](https://eips.ethereum.org/EIPS/eip-1884): Repricing for
-  trie-size-dependent opcodes
-- [EIP-2028](https://eips.ethereum.org/EIPS/eip-2028): Calldata gas
-  cost reduction
-- [EIP-2200](https://eips.ethereum.org/EIPS/eip-2200): Rebalance
-  net-metered SSTORE gas cost with consideration of SLOAD gas cost
-  change
-
-### Implementation
-
-Adoption of the content of this ECIP requires a hard fork as it
-introduces changes that are not backward compatible.
-
-The following clients with Ethereum Classic support implement the
-_Istanbul_ features and ECIP-1040 / EIP-1702 currently:
-
-- Parity Ethereum
-- Multi-Geth
-
-The following clients implement _Istanbul_ features but does not yet
-support ECIP-1040 / EIP-1702:
-
-- Hyperledger Besu
-
-## Copyright
-
-This work is licensed under [Apache License, Version
-2.0](http://www.apache.org/licenses/).
diff --git a/_specs/ecip-1074.md b/_specs/ecip-1074.md
deleted file mode 100644
index 02289609..00000000
--- a/_specs/ecip-1074.md
+++ /dev/null
@@ -1,97 +0,0 @@
----
-lang: en
-ecip: 1074
-title: Tanchun EVM and Protocol Upgrades
-status: Withdrawn
-type: Meta
-author: Wei Tang (@sorpaas)
-created: 2019-11-14
-discussions-to: https://github.com/ethereumclassic/ECIPs/issues/81
-license: Apache-2.0
----
-
-### Simple Summary
-
-Enable the outstanding Ethereum Foundation _Istanbul_ network protocol
-upgrades on the Ethereum Classic network in a hard-fork code-named
-_Tanchun_ to enable maximum compatibility across these networks.
-
-In particular, enables account versioning EIP-1702 with
-forward-compatible EVM changes.
-
-### Abstract
-
-Add support for a subset of protocol-impacting changes introduced in
-the Ethereum Foundation (ETH) network via the _Istanbul_ hardforks.
-
-This document proposes the following blocks at which to implement
-these changes in the Classic networks:
-
-- `TBD` on Mordor Classic PoW-testnet (Feb 5th, 2020)
-- `TBD` on Kotti Classic PoA-testnet (Feb 12th, 2020)
-- `TBD` on Ethereum Classic PoW-mainnet (March 25th, 2020)
-
-For more information on the opcodes and their respective EIPs and
-implementations, please see the _Specification_ section of this
-document.
-
-### Motivation
-
-To enhance the Ethereum Virtual Machine's (EVM) capabilities, various
-opcodes shall be added to the Ethereum Classic networks, all of which
-have been in use on the Ethereum Foundation networks since end of
-2019.
-
-This hard fork first enables the [Kunming hard fork
-specification](https://ecips.ethereumclassic.org/ECIPs/ecip-1065), and
-then enables all Istanbul features on top of the forward-compatible
-EVM.
-
-### Specification
-
-Enable
-[ECIP-1040](https://ecips.ethereumclassic.org/ECIPs/ecip-1040). Freeze
-features on version `0`. Define a new account version `1`, with the
-following additional EIPs enabled:
-
-- [39-UNGAS](https://specs.that.world/39-ungas/): Remove all
-  observable behavior of gas cost in EVM and change out-of-gas
-  exception to trap the whole transaction.
-- [40-UNUSED](https://specs.that.world/40-unused/): Disable deployment
-  of unused opcodes.
-- [EIP-152](https://eips.ethereum.org/EIPS/eip-152): Add Blake2
-  compression function `F` precompile
-- [EIP-1108](https://eips.ethereum.org/EIPS/eip-1108): Reduce
-  alt_bn128 precompile gas costs
-- [EIP-1344](https://eips.ethereum.org/EIPS/eip-1344): Add ChainID
-  opcode
-- [EIP-1884](https://eips.ethereum.org/EIPS/eip-1884): Repricing for
-  trie-size-dependent opcodes
-- [EIP-2028](https://eips.ethereum.org/EIPS/eip-2028): Calldata gas
-  cost reduction
-- [EIP-2200](https://eips.ethereum.org/EIPS/eip-2200): Rebalance
-  net-metered SSTORE gas cost with consideration of SLOAD gas cost
-  change
-
-### Implementation
-
-Adoption of the content of this ECIP requires a hard fork as it
-introduces changes that are not backward compatible.
-
-The following clients with Ethereum Classic support implement the
-_Istanbul_ features and ECIP-1040 / EIP-1702 currently:
-
-- Parity Ethereum
-- Multi-Geth
-
-The following clients implement _Istanbul_ features but does not yet
-support ECIP-1040 / EIP-1702:
-
-- Hyperledger Besu
-
-No clients currently have implemented *39-UNGAS* and *40-UNUSED* yet.
-
-## Copyright
-
-This work is licensed under [Apache License, Version
-2.0](http://www.apache.org/licenses/).

From f9de1b64e198dfdb516e70ff8d7d54945da0b222 Mon Sep 17 00:00:00 2001
From: Donald McIntyre <donald@etherplan.com>
Date: Mon, 20 Jan 2020 19:25:38 -0700
Subject: [PATCH 5/5] Reducing scope of this PR to only remove Editor.

As there is no rough consensus to remove @sorpaas from other oles, I am scaling back the scope of my proposal to only remove him as an editor of ECIP-1000.
---
 _specs/ECIP-TBD.md | 44 +++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 41 insertions(+), 3 deletions(-)

diff --git a/_specs/ECIP-TBD.md b/_specs/ECIP-TBD.md
index 95c3a385..6383bb35 100644
--- a/_specs/ECIP-TBD.md
+++ b/_specs/ECIP-TBD.md
@@ -1,6 +1,6 @@
 ---
 ecip: ECIP number TBD
-title: Proposal for owner, member, editor, & author removal
+title: Proposal to remove ECIP editor
 author: Donald McIntyre (@TokenHash)
 discussions-to: https://github.com/ethereumclassic/ECIPs/issues/273
 status: Draft
@@ -11,7 +11,7 @@ license: Apache-1
 
 ### Proposal
 
-I propose Wei Tang (@sorpaas) be expelled from the Ethereum Classic organization as a 'member' or 'owner' whatever is his role there. I also propose for him to be taken out as an 'editor' in the ECIP process, namely ECIP-1000, and that ECIP-1000 be replaced with a new clean 'process' ECIP with a new author, so Sorpaas is removed from that position as well.
+I propose Wei Tang (@sorpaas) to be removed as 'editor' in the ECIP process: ECIP-1000.
 
 ### Rationale
 
@@ -25,12 +25,50 @@ I propose Wei Tang (@sorpaas) be expelled from the Ethereum Classic organization
 
 In general, Sorpaas has become a very negative participant, is inhibiting others from freely participating in the development process, and abuses his quadruple position as a client developer, ETC Github member, ECIP editor, and ECIP-1000 author.
 
-For the above I make this proposal for his removal from all those positions in the ETC ecosystem.
+For the above I make this proposal for his removal as ECIP-1000 editor.
 
 ### Implementation
 
 When this ECIP is accepted by rough consensus, the modifications proposed could be implemented by Ethereum Classic Organization owners on Github and ECIP editors directly on the corresponding ECIPs.
 
+### Some Evidence That Informs This Proposal
+
+A. Sorpaas doxxing of two editors in ECIP-1000:
+
+![Screen Shot 2020-01-19 at 11 01 05 AM](https://user-images.githubusercontent.com/29529586/72753069-1fe2d200-3b81-11ea-8a77-b69f1296639d.png)
+
+B. Example of lying claiming that an 'accepted' ECIP cannot be changed:
+
+![A](https://user-images.githubusercontent.com/29529586/72753234-8ff15800-3b81-11ea-9d81-519f8be592a3.png)
+
+C. Example of accusing other contributors of "bypassing" an imaginary rule in the process, and ECIP process as a whole, contributors just propose ideas:
+
+![B](https://user-images.githubusercontent.com/29529586/72753313-de9ef200-3b81-11ea-9830-037735e28de0.png)
+
+D. Example of intimidation of other contributors accusing them of proposing things that will provoke vulnerabilities:
+
+![C](https://user-images.githubusercontent.com/29529586/72753604-946a4080-3b82-11ea-95af-f37eaadf1a4f.png)
+
+E. Example of making the false equivalence between the ECIP process and the operating blockchain, and intimidating other contributors by re-phrasing their comments, falsely claiming they mean something they don't and subsequently asking the contributor to shut up if he doesn't want his comments to be re-interpreted with false assumptions:
+
+![F](https://user-images.githubusercontent.com/29529586/72754188-5a01a300-3b84-11ea-9576-d6fcd44ececc.png)
+  
+F. Lying about rules and text on ECIP-1000 that don't exist, trying to stop changes to his or other ECIPs:
+
+![G](https://user-images.githubusercontent.com/29529586/72754356-c8466580-3b84-11ea-9b02-609f1b12414b.png)
+
+G. Pointing again that a rule or text exists, but was never able to demonstrate because they don't actually exist. Subsequently, insulting the other contributor again:
+
+![H](https://user-images.githubusercontent.com/29529586/72754495-3559fb00-3b85-11ea-9b44-9c59008dfb59.png)
+
+I. Repeatedly falsely claiming other contributors don't want to follow or want to bypass the ECIP process as way to intimidate, change the conversation, and stop other changes making up reasons. 
+
+Claiming that an "irregular" path is created, making the false analogy to theDAO hard fork "irregular state" transition:
+
+![I](https://user-images.githubusercontent.com/29529586/72754762-fb3d2900-3b85-11ea-92ba-297956990eb6.png)
+ 
+There is much more evidence from past conversations with others in the recent months.
+
 ### Copyright/Licensing
 
 Apache -2
