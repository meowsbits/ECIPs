From 6c31bdf7d4b9f532d9b7b23e1058a3cbfa00a172 Mon Sep 17 00:00:00 2001
From: Cody Burns <cody.w.burns@gmail.com>
Date: Fri, 28 Aug 2020 16:23:41 -0500
Subject: [PATCH 1/2] Update ecip-1043.md

Added Recommended Implementation to clarify implementation
---
 _specs/ecip-1043.md | 21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)

diff --git a/_specs/ecip-1043.md b/_specs/ecip-1043.md
index 6cd6e377f..29fff250b 100644
--- a/_specs/ecip-1043.md
+++ b/_specs/ecip-1043.md
@@ -35,6 +35,27 @@ The only modification is to stop the increase of DAG size and cache size.
 * D: set to 2.9 GB at block x
 * E: set to 1.5 GB at block x
 
+## Recommended Implementation
+
+Two variables directly control the dag size growth cacheSize and datasetSize 
+
+ - cacheSize is the size of the ethash verification cache that belongs to a certain block number.  The cache size grows linearly, however, we always take the highest prime below the linearly growing threshold in order to reduce the risk of accidental regularities leading to cyclic behavior
+ 
+ - DatasetSize is the size of the ethash mining dataset that belongs to a certain block number. The dataset size grows linearly, however, we always take the highest prime below the linearly growing threshold in order to reduce the risk of accidental regularities leading to cyclic behavior.
+ 
+These values are calculated as blockNumber / epochLength. To set the dag growth to a number smaller than what would occur through the normal calculation. A Magic Dag Epoch block is of `42` replaces `blockNumber / epochLength` as the epoch number after the fork block and when the dag is calculated in the future this epoch is always used. Dag generation is uneffected and both cache and data size will pepertually be 22281536 and 1426062464 respectivly. 
+ 
+```
+//run prior to calculating cacheSize or dataSize 
+
+ if (blocknumber > ECIP1043Transition) {
+		epoch := 42
+	} else {
+		epoch := int(block / epochLength)
+	}
+```
+
+
 ## Risks Consideration
 * This ECIP is not forward compatible and introduces backwards incompatibilities in the DAG file generation, block verification, and block mining. Therefore, it should be included in a scheduled hardfork at a certain block number.
 * This is a long term PRO applicaton specific hardware proposal. If sufficient interest is not generated by manufactures in the mining field, there is risk of domination by one or more manufactures. (market risk)  

From 69b9608f752586d42f5b099543c2eaac439ae479 Mon Sep 17 00:00:00 2001
From: Cody Burns <cody.w.burns@gmail.com>
Date: Sat, 29 Aug 2020 17:41:57 -0500
Subject: [PATCH 2/2] Update ecip-1043.md

add 64 for dao fork
---
 _specs/ecip-1043.md | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/_specs/ecip-1043.md b/_specs/ecip-1043.md
index 29fff250b..35838a1e8 100644
--- a/_specs/ecip-1043.md
+++ b/_specs/ecip-1043.md
@@ -43,13 +43,13 @@ Two variables directly control the dag size growth cacheSize and datasetSize
  
  - DatasetSize is the size of the ethash mining dataset that belongs to a certain block number. The dataset size grows linearly, however, we always take the highest prime below the linearly growing threshold in order to reduce the risk of accidental regularities leading to cyclic behavior.
  
-These values are calculated as blockNumber / epochLength. To set the dag growth to a number smaller than what would occur through the normal calculation. A Magic Dag Epoch block is of `42` replaces `blockNumber / epochLength` as the epoch number after the fork block and when the dag is calculated in the future this epoch is always used. Dag generation is uneffected and both cache and data size will pepertually be 22281536 and 1426062464 respectivly. 
+These values are calculated as blockNumber / epochLength. To set the dag growth to a number smaller than what would occur through the normal calculation. A Magic Dag Epoch block is of `64` replaces `blockNumber / epochLength` as the epoch number after the fork block and when the dag is calculated in the future this epoch is always used. Dag generation is uneffected and will compute at epoch 64 pepeturally. Epoch 64 was selected because it included block 1,920,000 where the mining community rallied to help ETC form and survive. 
  
 ```
 //run prior to calculating cacheSize or dataSize 
 
  if (blocknumber > ECIP1043Transition) {
-		epoch := 42
+		epoch := 64
 	} else {
 		epoch := int(block / epochLength)
 	}
