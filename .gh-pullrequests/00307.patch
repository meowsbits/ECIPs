From 1451fbac4bcaf17b8b420902307c1c288f56f920 Mon Sep 17 00:00:00 2001
From: Cody Burns <cody.w.burns@gmail.com>
Date: Tue, 3 Mar 2020 19:54:15 -0800
Subject: [PATCH] Update ecip-1037.md

format clean up
---
 _specs/ecip-1037.md | 100 ++++++++++++++++++++++----------------------
 1 file changed, 50 insertions(+), 50 deletions(-)

diff --git a/_specs/ecip-1037.md b/_specs/ecip-1037.md
index 90e8167d..dd0550fb 100644
--- a/_specs/ecip-1037.md
+++ b/_specs/ecip-1037.md
@@ -11,65 +11,65 @@ created: 2017-09-09
 
 This ECIP is based off BIP 0021 can be referenced at https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki
 
-==Abstract==
+# Abstract
 This ECIP proposes a URI scheme for interacting with ethereum contract and accounts in a uniform standard format. 
 
-==Motivation==
+# Motivation
 The purpose of this URI scheme is to enable users to easily make payments and interact with smart contracts by simply clicking links on webpages or scanning QR Codes. This allows for nfc, qr codes, or other similar non-interactive devices to store and transmit a standard message to a user, as well as interactive applications such as websites and dApps to present simple data to a user for action 
 
-==Specification==
+# Specification
 
-=== General rules for handling (important!) ===
+## General rules for handling (important!) 
 
 ETC clients MUST NOT act on URIs without getting the user's authorization.
 They SHOULD require the user to manually approve each payment individually, though in some cases they MAY allow the user to automatically make this decision.
 ETC clients SHOULD include the message field describing the actions of the code.
 
-=== Operating system integration ===
+## Operating system integration 
 Graphical ethereum clients SHOULD register themselves as the handler for the "ethereum:" URI scheme by default, if no other handler is already registered. If there is already a registered handler, they MAY prompt the user to change it once when they first run the client.
 
-=== General Format ===
+## General Format 
 
 Ethereum URIs follow the general format for URIs as set forth in RFC 3986. The path component consists of an Ethereum address, and the query component provides additional payment options.
 
 Elements of the query component may contain characters outside the valid range. These must first be encoded according to UTF-8, and then each octet of the corresponding UTF-8 sequence must be percent-encoded as described in RFC 3986.
 
-=== ABNF grammar ===
-
- ethereumurn     = "ethereum:" ethereumaddress & ethereumchainid [ "?" ethereumparams ]
- ethereumaddress = *hexdig
- ethereumchainid = "id=" *digit
- ethereumparams  = ethereumparam [ "&" ethereumparams ]
- ethereumparam   = [ amountparam / gasparam / gaslimitparm / nonceparam / codeparam / labelparam / messageparam / otherparam / reqparam]
- amountparam     = "amount=" *digit [ "." *digit ]
- gasparam        = "gas=" *digit
- gaslimitparm    = "glmt=" *digit
- nonceparam      = "n=" *digit
- codeparam       = "code=" *hexdig
- labelparam      = "label=" *qchar
- messageparam    = "message=" *qchar
- otherparam      = qchar *qchar [ "=" *qchar ]
- reqparam        = "req-" qchar *qchar [ "=" *qchar ]
+## ABNF grammar 
+
+* ethereumurn     = "ethereum:" ethereumaddress & ethereumchainid [ "?" ethereumparams ]
+* ethereumaddress = *hexdig
+* ethereumchainid = "id=" *digit
+* ethereumparams  = ethereumparam [ "&" ethereumparams ]
+* ethereumparam   = [ amountparam / gasparam / gaslimitparm / nonceparam / codeparam / labelparam / messageparam / otherparam / reqparam]
+* amountparam     = "amount=" *digit [ "." *digit ]
+* gasparam        = "gas=" *digit
+* gaslimitparm    = "glmt=" *digit
+* nonceparam      = "n=" *digit
+* codeparam       = "code=" *hexdig
+* labelparam      = "label=" *qchar
+* messageparam    = "message=" *qchar
+* otherparam      = qchar *qchar [ "=" *qchar ]
+* reqparam        = "req-" qchar *qchar [ "=" *qchar ]
 
 Here, "qchar" corresponds to valid characters of an RFC 3986 URI query component, excluding the "=" and "&" characters, which this ECIP takes as separators.
 
 The scheme component ("ethereum:") is case-insensitive, and implementations must accept any combination of uppercase and lowercase letters. The rest of the URI is case-sensitive, including the query parameter keys.
 
-=== Query Keys ===
+## Query Keys 
 
-*address: ethereum account or contract address in hexidecimal 
-*id: eip 155 compliant chainid, used for sanity check 
-*amount = amount of ether to transfer, denominated in ETC
-*gas = gas price
-*gaslmt = amount of gas transaction is not to exceed
-*nonce = account nonce 
-*code = byte code data for transaction
-*label: Label for that address (e.g. name of receiver)
-*message: message that describes the transaction to the user ([[#Examples|see examples below]])
-*(others): optional, for future extensions
+* address: ethereum account or contract address in hexidecimal 
+* id: eip 155 compliant chainid, used for sanity check 
+* amount = amount of ether to transfer, denominated in ETC
+* gas = gas price
+* gaslmt = amount of gas transaction is not to exceed
+* nonce = account nonce 
+* code = byte code data for transaction
+* label: Label for that address (e.g. name of receiver)
+* message: message that describes the transaction to the user ([[#Examples|see examples below]])
+* (others): optional, for future extensions
 
 
-=== EIP 155 Transaction === 
+## EIP 155 Transaction 
 
 The intent of the uri is to pass all information nessecarry for forming a raw transaction to another device or service for signing. 
 
@@ -90,7 +90,7 @@ A raw transaction should map the uri functions as follows for RLP encoding:
 The parameters labelparam, messageparam, otherparam, and reqparam are not used in transaction signing and can be optionally displayed to the user to pass additional information about the transaction. 
 
         
-==== Transfer amount/size ====
+### Transfer amount/size 
 
 If an amount is provided, it MUST be specified in decimal ETC.
 All amounts MUST contain no commas and use a period (.) as the separating character to separate whole numbers and decimal fractions.
@@ -100,7 +100,7 @@ ETC clients MAY display the amount in any format that is not intended to deceive
 They SHOULD choose a format that is foremost least confusing, and only after that most reasonable given the amount requested.
 For example, so long as the majority of users work in ETC units, values should always be displayed in ETC by default, even if wei would otherwise be a more logical interpretation of the amount.
 
-=== ENS addresses ===
+## ENS addresses 
 
 The Ethereum Name Service is a protocol and ABI definition that provides flexible resolution of short, human-readable names to service and resource identifiers. This permits users and developers to refer to human-readable and easy to remember names, and permits those names to be updated as necessary when the underlying resource (contract, content-addressed data, etc) changes.
 
@@ -135,11 +135,11 @@ For the specification of the URI, <label> resolves into the following ethereumch
 |-
 |}
 
-=== Bytecode Transactions ===
+## Bytecode Transactions 
 
 Events and functions in evm contracts are / can be preformatted to know functions in the underlying contract. The first four bytes of the call data for a function call specifies the function to be called. It is the first (left, high-order in big-endian) four bytes of the Keccak (SHA-3) hash of the signature of the function. This information along, with the appropriate hex encoded data to pass, form the bytecode.
 
-====Example====
+### Example
 
 Contract C is at 0xdeadbeef... and has the following psudo function:
 
@@ -168,19 +168,19 @@ The entire URi could be:
 
 Bytecode specifications can be found in their respective documentation.
 
-== Rationale ==
+# Rationale 
 
-===Payment identifiers, not person identifiers===
+## Payment identifiers, not person identifiers
 Current best practices are that a unique address should be used for every transaction.
 Therefore, a URI scheme should not represent an exchange of personal information, but a one-time payment or function call.
 
-===Accessibility (URI scheme name)===
+## Accessibility (URI scheme name)
 Should someone from the outside happen to see such a URI, the URI scheme name already gives a description.
 A quick search should then do the rest to help them find the resources needed to make their payment.
 Other proposed names sound much more cryptic; the chance that someone googles that out of curiosity are much slimmer.
 Also, very likely, what he will find are mostly technical specifications - not the best introduction to ETC.
 
-===Contract Code===
+## Contract Code
 
 It is not the intent of this ECIP to define every possible contract code that could be implimented.
 Higher level functionality would be provided by the site creating the URI qr code and, for lack of a better term,
@@ -192,15 +192,15 @@ Best practices in function codes shold be adhered to and this ECIP should remain
 It is recommended that dApps should make effort to include in the message what is being accomplished in the code.
 
 
-==Forward compatibility==
+## Forward compatibility
 Variables which are prefixed with a req- are considered required.  If a client does not implement any variables which are prefixed with req-, it MUST consider the entire URI invalid.  Any other variables which are not implemented, but which are not prefixed with a req-, can be safely ignored.
 
-==Backward compatibility==
+## Backward compatibility
 As this ECIP is written, several clients already implement a ethereum: URI scheme similar to this one, however usually without the additional "req-" prefix requirement.  Thus, it is recommended that additional variables prefixed with req- not be used in a mission-critical way until a grace period of 6 months from the finalization of this ECIP has passed in order to allow client developers to release new versions, and users of old clients to upgrade.
 
-== Appendix ==
+# Appendix 
 
-=== Simpler syntax ===
+## Simpler syntax 
 
 This section is non-normative and does not cover all possible syntax.
 Please see the BNF grammar above for the normative syntax.
@@ -209,7 +209,7 @@ Please see the BNF grammar above for the normative syntax.
 
  <nowiki>ethereum:<address>&id=<chainid>[?amount=<amount>][&gas=<startGas>][&glmt=<gaslimit>][&n=<nonce>][&code=<data>][&label=<label>][&message=<message>]</nowiki>
 
-=== Examples ===
+## Examples 
 
 Just the address:
  ethereum:0xCe5ED529977b08f87CBc207ebC216859820461eE&id=61
@@ -237,11 +237,11 @@ Some future version that has variables which are (currently) not understood but
 
 Characters must be URI encoded properly.
 
-== Reference Implementations ==
+# Reference Implementations 
 
-=== Libraries ===
+## Libraries 
 
-=== References ===
+## References 
 
 BIP 21: Bitcoin URI Scheme
 https://github.com/bitcoin/bips/blob/master/bip-0021.mediawik
