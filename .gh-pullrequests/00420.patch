From 2322e16d5a7f06b79af72602196077d0c22410a0 Mon Sep 17 00:00:00 2001
From: meows <b5c6@protonmail.com>
Date: Mon, 26 Apr 2021 15:28:15 -0500
Subject: [PATCH 01/11] _specs: init ECIP Endorser Transactions ECBP Scheme
 documentation

Date: 2021-04-26 15:28:15-05:00
Signed-off-by: meows <b5c6@protonmail.com>
---
 _specs/eip-endorser_transactions.md | 112 ++++++++++++++++++++++++++++
 1 file changed, 112 insertions(+)
 create mode 100644 _specs/eip-endorser_transactions.md

diff --git a/_specs/eip-endorser_transactions.md b/_specs/eip-endorser_transactions.md
new file mode 100644
index 000000000..b61e7d888
--- /dev/null
+++ b/_specs/eip-endorser_transactions.md
@@ -0,0 +1,112 @@
+---
+ecip: TBD
+title: Endorser Transactions
+lang: en
+author: Isaac <b5c6@protonmail.com>
+discussions-to: TODO
+status: Draft
+type: Standards Track
+category: ECBP
+created: 2020-09-04
+license: Apache-2
+---
+
+
+## Abstract
+
+Provide a way for node operators to prefer an arbitrary chain segment, and to use that preference to thwart bad guys.
+
+## Motivation
+
+A low hashrate has caused Ethereum Classic's consensus algorithms to yield inconvenient and undesirable finality rates.
+
+The motivation of this proposal is to achieve a solution that alleviates a slow finality curve, while creatively managing the effects of tampering with existing "hard" consensus protocols.
+
+## Specification
+
+A. Provide a feature -- either as `geth` options (as exemplified below), or via a standalone program -- facilitating the creation of intermittent transactions to the (subjectively) canonical blockchain, recording an entity's endorsement of it.
+
+B. Provide a feature in `geth` facilitating the reference of these transations as parameters for use in chain segment acceptance arbitration given a reorg of some size.
+
+### Example
+
+_This example, for the sake of descriptive simplicity, details the installation of the proposed features as built-in to `geth`. It is, however, more likely that the feature would be best implemented by a dedicated endorsement-transaction program that would run adjacent to some `geth`; retrieving chain data from it, signing transactions with an arbitrary signing program (eg `clef` or `jade-signer`), and subsequently sending signed transactions to `geth` for chain inclusion._
+
+Provide a flag `--endorsing.signers=<0xaddressA>,<0xaddressB>` that is empty (deactivated) by default.
+
+Provide a flag `--endorsing.threshold=<number>` that is 0 (deactivated) by default.
+
+If either of these flag values is empty, node behavior is defaulty; ie. both flags must be set with non-zero values for behavior to be modified.
+
+Provide a flag `--endorsing.signer=<0xsignerAddress>` that is empty (deactivated) by default. If set, this value is used to sign transactions that may be relied on for determining chain preference. Although operators may use any key for this value, they would be encouraged to use a key which IS NOT their etherbase for practical security reasons.
+
+Provide a flag `--endorsing.signerpass=</path/to/passfile.txt>` that is empty (disabled) by default. This value will be used to unlock the key required for signing.
+
+Provide a flag `--endorsing.txinterval=<number>` that is empty (disabled) by default. If set, this value will be used to determine the frequency endorsing transactions should be sent.
+
+If any of these flag values is empty, node behavior is defaulty; ie. both flags must be set with non-zero values for behavior to be modified.
+
+If these values are configured, the node will sign and send a transaction signed by their `endorsing.signer` key at the specified interval.
+
+The transactions should take the form:
+
+```
+from: <endorsing.signer>
+to: <endorsing.signer>
+data: 0x<paddedBlockNumber><blockHash>
+```
+
+_The specification here is not (yet) firm. The important part is that some impossible-to-forge but easily-verifiable characteristics of the endorsed chain are included and publicly observable._
+
+Nodes would not need to normally validate endorsements against their chain view, doing so only in the event of a large reorg (ie. deeper than `endorsing.threshold`).
+
+In the event of a sufficiently large reorg, proposed blocks may be validated to have been endorsed (asserted) by signers by iterating through the transactions in the proposed (new) segment, filtering on `tx.from == tx.to && endorsing.signers.contains(tx.from)`, and, if a matching transaction is found, verifying the included (parsed) reference data against the incoming proposed segment. If the segment is found to contain the asserted characteristics, the segment would be accepted. In case no truthy value is found, the segment is either rejected or passed on for further arbitration.
+
+
+#### Generic
+
+Reorganization depth may be determined concretely or stochastically.
+
+In the concrete case, it may be measured as a distance from a node's current head. In the stochastic case, it may be determined _ala_ PERMAPOINTING.
+
+#### Specific (Proposed)
+
+For reorganizations of depth greater than `endorsing.threshold`, nodes having this configuration activated require chain segments to contain _at least one_ block signed by _any_ of the given `endorsing.signers`.
+
+In the case of Ethereum Classic, especially miners on the network would be encouraged to use these flags. Further, they would be encouraged to keep the value they choose for `endorsing.threshold` private, and to choose a hard-to-guess value that they feel reflects their desired risk/finality profile.
+
+## Rationale
+
+This idea intends to make existing, but chain-view-tacit, social and economic relationships available for observation and use on chain. Its implementation would not require a hard fork; it only uses existing features of the Ethereum Classic chain in as-yet unconventional ways.
+
+This proposal allows node operators to make their own decisions about the role of trust _relative to themselves_ on the PoW chain, avoiding reliance on developers or other authority entities to make decisions about endorsements or canonical-status on behalf of the network.
+
+Node operators are incentivized to aggressively limit their endorsement-delegation, thereby limiting their exposure to betrayal (relative to the majority).
+
+Node operators would be encouraged to limit their endorsement-delegation to themselves and to only those they deem absolutely and necessary trustworthy.
+
+Mining node operators are incentivized to implement endorsements, since it provides a way for them to
+- prefer chains on which they have mined over those they have not
+- prefer chains they believe _will_ be mined, over those they consider less likely (or socially/economically desirable) to become canonical
+
+Further, for miners, the endorsement transactions -- aside from additional technical overhead -- can be made for free.
+
+### FAQ
+
+##### Is this Proof of Authority?
+
+No. Proof of Authority networks use entity (or identity...) authorization as a condition of block production. Endorsed transactions offers a way for node operators to have a _choice of authority_ when their node is faced with tough decisions.
+
+The cases in which these decisions would occur have been such that a pure proof-of-work consensus is at odds with social consensus. This approach intends to provide a tool whereby node operators can express and observe an aspect of the social and economic context, at the behest of the node operator.
+
+This solution leaves as much of the "human arbitration" as possible in the hands of node operators as sovereign, democratic actors. 
+
+##### How is this different than other "Checkpoint" solutions?
+
+This solution does not offer any canonical checkpoint, nor any means of establishing one. Most checkpointing solutions do this.
+
+This solution does not rely on any single oracle or oracles, whereas most checkpointing solutions look to core developers, adjacent networks, or hardcoded values for sources of truth. Instead, this solution offers a tool that _allows_ node operators to express and observe chain preference. The ultimate impact of the feature on the network remains strictly in the hands of the operators.
+
+## Copyright/Licensing
+
+Copyright 2020 Isaac A. \<b5c6@protonmail.com\>

From 74f08571bea8c7d7ebe251ed7a4c38e0e7471d34 Mon Sep 17 00:00:00 2001
From: meows <b5c6@protonmail.com>
Date: Mon, 26 Apr 2021 15:31:07 -0500
Subject: [PATCH 02/11] _specs: CC0

Date: 2021-04-26 15:31:07-05:00
Signed-off-by: meows <b5c6@protonmail.com>
---
 _specs/eip-endorser_transactions.md | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/_specs/eip-endorser_transactions.md b/_specs/eip-endorser_transactions.md
index b61e7d888..899b2e711 100644
--- a/_specs/eip-endorser_transactions.md
+++ b/_specs/eip-endorser_transactions.md
@@ -109,4 +109,5 @@ This solution does not rely on any single oracle or oracles, whereas most checkp
 
 ## Copyright/Licensing
 
-Copyright 2020 Isaac A. \<b5c6@protonmail.com\>
+Copyright and related rights waived via
+[CC0](https://creativecommons.org/publicdomain/zero/1.0/).

From 80b5ef9b58b545717bed46fb72799fb34cb6b417 Mon Sep 17 00:00:00 2001
From: meows <b5c6@protonmail.com>
Date: Mon, 26 Apr 2021 15:33:12 -0500
Subject: [PATCH 03/11] _specs: remove license field from frontmatter

Date: 2021-04-26 15:33:12-05:00
Signed-off-by: meows <b5c6@protonmail.com>
---
 _specs/eip-endorser_transactions.md | 1 -
 1 file changed, 1 deletion(-)

diff --git a/_specs/eip-endorser_transactions.md b/_specs/eip-endorser_transactions.md
index 899b2e711..bb6a50034 100644
--- a/_specs/eip-endorser_transactions.md
+++ b/_specs/eip-endorser_transactions.md
@@ -8,7 +8,6 @@ status: Draft
 type: Standards Track
 category: ECBP
 created: 2020-09-04
-license: Apache-2
 ---
 
 

From 79dee9f0473364905fa58db6d97fcff3a54e8050 Mon Sep 17 00:00:00 2001
From: meows <b5c6@protonmail.com>
Date: Sat, 1 May 2021 07:44:43 -0500
Subject: [PATCH 04/11] _specs: rename eip->ecip

Date: 2021-05-01 07:44:43-05:00
Signed-off-by: meows <b5c6@protonmail.com>
---
 ...eip-endorser_transactions.md => ecip-endorser_transactions.md} | 0
 1 file changed, 0 insertions(+), 0 deletions(-)
 rename _specs/{eip-endorser_transactions.md => ecip-endorser_transactions.md} (100%)

diff --git a/_specs/eip-endorser_transactions.md b/_specs/ecip-endorser_transactions.md
similarity index 100%
rename from _specs/eip-endorser_transactions.md
rename to _specs/ecip-endorser_transactions.md

From b1c6748ec88ad348416083e0c9ed771baa3b9c7d Mon Sep 17 00:00:00 2001
From: meows <b5c6@protonmail.com>
Date: Sat, 1 May 2021 07:47:20 -0500
Subject: [PATCH 05/11] _specs: move from Core -> Information type

Date: 2021-05-01 07:47:20-05:00
Signed-off-by: meows <b5c6@protonmail.com>
---
 _specs/ecip-endorser_transactions.md | 5 ++---
 1 file changed, 2 insertions(+), 3 deletions(-)

diff --git a/_specs/ecip-endorser_transactions.md b/_specs/ecip-endorser_transactions.md
index bb6a50034..8a11deb38 100644
--- a/_specs/ecip-endorser_transactions.md
+++ b/_specs/ecip-endorser_transactions.md
@@ -5,8 +5,7 @@ lang: en
 author: Isaac <b5c6@protonmail.com>
 discussions-to: TODO
 status: Draft
-type: Standards Track
-category: ECBP
+type: Informational
 created: 2020-09-04
 ---
 
@@ -17,7 +16,7 @@ Provide a way for node operators to prefer an arbitrary chain segment, and to us
 
 ## Motivation
 
-A low hashrate has caused Ethereum Classic's consensus algorithms to yield inconvenient and undesirable finality rates.
+A low hash rate has caused Ethereum Classic's consensus algorithms to yield inconvenient and undesirable finality rates.
 
 The motivation of this proposal is to achieve a solution that alleviates a slow finality curve, while creatively managing the effects of tampering with existing "hard" consensus protocols.
 

From c01daa8e209be41fae066ec9a78b21be5c70d2df Mon Sep 17 00:00:00 2001
From: meows <b5c6@protonmail.com>
Date: Sat, 1 May 2021 08:32:07 -0500
Subject: [PATCH 06/11] _specs: simpler

Date: 2021-05-01 08:32:07-05:00
Signed-off-by: meows <b5c6@protonmail.com>
---
 _specs/ecip-endorser_transactions.md | 88 ++++++++++++----------------
 1 file changed, 36 insertions(+), 52 deletions(-)

diff --git a/_specs/ecip-endorser_transactions.md b/_specs/ecip-endorser_transactions.md
index 8a11deb38..96348b8ef 100644
--- a/_specs/ecip-endorser_transactions.md
+++ b/_specs/ecip-endorser_transactions.md
@@ -9,6 +9,9 @@ type: Informational
 created: 2020-09-04
 ---
 
+## Simple Summary
+
+Describes a practice enabling chain discretion based on endorsements by verifiable identities.
 
 ## Abstract
 
@@ -22,88 +25,69 @@ The motivation of this proposal is to achieve a solution that alleviates a slow
 
 ## Specification
 
-A. Provide a feature -- either as `geth` options (as exemplified below), or via a standalone program -- facilitating the creation of intermittent transactions to the (subjectively) canonical blockchain, recording an entity's endorsement of it.
-
-B. Provide a feature in `geth` facilitating the reference of these transations as parameters for use in chain segment acceptance arbitration given a reorg of some size.
-
-### Example
-
-_This example, for the sake of descriptive simplicity, details the installation of the proposed features as built-in to `geth`. It is, however, more likely that the feature would be best implemented by a dedicated endorsement-transaction program that would run adjacent to some `geth`; retrieving chain data from it, signing transactions with an arbitrary signing program (eg `clef` or `jade-signer`), and subsequently sending signed transactions to `geth` for chain inclusion._
-
-Provide a flag `--endorsing.signers=<0xaddressA>,<0xaddressB>` that is empty (deactivated) by default.
-
-Provide a flag `--endorsing.threshold=<number>` that is 0 (deactivated) by default.
+Transactions are included in chain state which signal an identity-verifiable endorsement.
 
-If either of these flag values is empty, node behavior is defaulty; ie. both flags must be set with non-zero values for behavior to be modified.
+Such transactions can be observed and acted upon in case of chain identification and discretion challenges.
 
-Provide a flag `--endorsing.signer=<0xsignerAddress>` that is empty (deactivated) by default. If set, this value is used to sign transactions that may be relied on for determining chain preference. Although operators may use any key for this value, they would be encouraged to use a key which IS NOT their etherbase for practical security reasons.
+### Endorser Transactions
 
-Provide a flag `--endorsing.signerpass=</path/to/passfile.txt>` that is empty (disabled) by default. This value will be used to unlock the key required for signing.
+Transactions are made by an endorsing entity including information in the `data` field referencing the block hash (or some other unique characteristic) of some endorsed ancestor.
 
-Provide a flag `--endorsing.txinterval=<number>` that is empty (disabled) by default. If set, this value will be used to determine the frequency endorsing transactions should be sent.
+The construction of this value could be of the form `0xff<block hash>`.
 
-If any of these flag values is empty, node behavior is defaulty; ie. both flags must be set with non-zero values for behavior to be modified.
+### Endorsement Observation
 
-If these values are configured, the node will sign and send a transaction signed by their `endorsing.signer` key at the specified interval.
+A node registers some list of trustee entities from whom they wish to acknowledge endorsements.
+These entities are registered via transaction author identities (sender address, `from`).
 
-The transactions should take the form:
+Transactions with a `data` field value matching the general pattern described above are filtered from the set of on-chain transactions.
+This set of filtered transactions are filtered again for positive matches against the local list of trustee authors.
 
-```
-from: <endorsing.signer>
-to: <endorsing.signer>
-data: 0x<paddedBlockNumber><blockHash>
-```
+Chain segments with positive matches for trustee endorsements are preferred in case of chain discretion challenges.
 
-_The specification here is not (yet) firm. The important part is that some impossible-to-forge but easily-verifiable characteristics of the endorsed chain are included and publicly observable._
-
-Nodes would not need to normally validate endorsements against their chain view, doing so only in the event of a large reorg (ie. deeper than `endorsing.threshold`).
-
-In the event of a sufficiently large reorg, proposed blocks may be validated to have been endorsed (asserted) by signers by iterating through the transactions in the proposed (new) segment, filtering on `tx.from == tx.to && endorsing.signers.contains(tx.from)`, and, if a matching transaction is found, verifying the included (parsed) reference data against the incoming proposed segment. If the segment is found to contain the asserted characteristics, the segment would be accepted. In case no truthy value is found, the segment is either rejected or passed on for further arbitration.
-
-
-#### Generic
+## Rationale
 
-Reorganization depth may be determined concretely or stochastically.
+The identity of an endorser transaction authorship is verifiable because transaction validity depends on valid signing.
 
-In the concrete case, it may be measured as a distance from a node's current head. In the stochastic case, it may be determined _ala_ PERMAPOINTING.
+## Backwards Compatibility
 
-#### Specific (Proposed)
+There are no known backward compatibility issues.
 
-For reorganizations of depth greater than `endorsing.threshold`, nodes having this configuration activated require chain segments to contain _at least one_ block signed by _any_ of the given `endorsing.signers`.
+## Security Considerations
 
-In the case of Ethereum Classic, especially miners on the network would be encouraged to use these flags. Further, they would be encouraged to keep the value they choose for `endorsing.threshold` private, and to choose a hard-to-guess value that they feel reflects their desired risk/finality profile.
+### Costs of Implementation
 
-## Rationale
+For miners acting as endorsers, the cost of including an endorsement transaction is equal to the opportunity cost of a replacing the transaction authored by anyone else.
+If block space competition is incomplete (an unfilled block), the transaction is free (aside from the nominal cost of CPU processing to generate the transaction).
 
-This idea intends to make existing, but chain-view-tacit, social and economic relationships available for observation and use on chain. Its implementation would not require a hard fork; it only uses existing features of the Ethereum Classic chain in as-yet unconventional ways.
+In the general case, the cost of creating an endorsing transaction is equal to cost of that transaction in gas fees.
 
-This proposal allows node operators to make their own decisions about the role of trust _relative to themselves_ on the PoW chain, avoiding reliance on developers or other authority entities to make decisions about endorsements or canonical-status on behalf of the network.
+The cost of observation of such transactions is expected to be programmatically nominal.
 
-Node operators are incentivized to aggressively limit their endorsement-delegation, thereby limiting their exposure to betrayal (relative to the majority).
+### Trustee Sociology and Incentives
 
-Node operators would be encouraged to limit their endorsement-delegation to themselves and to only those they deem absolutely and necessary trustworthy.
+It is expected that "followers" subscribing to endorsements should limit their set of trustees to a minimum, subscribing only to the most trustworthy and staked entities; risk of betrayal by any one of an observer's trustees should be met with commensurate risk management.
 
-Mining node operators are incentivized to implement endorsements, since it provides a way for them to
-- prefer chains on which they have mined over those they have not
-- prefer chains they believe _will_ be mined, over those they consider less likely (or socially/economically desirable) to become canonical
+It should be expected that trustee lists would be kept private for any given observing node.
 
-Further, for miners, the endorsement transactions -- aside from additional technical overhead -- can be made for free.
+In practice, a handful of sufficiently large miners should be expected to comprise the universal set of distinct trustees.
 
-### FAQ
+### Discretion Challenges
 
-##### Is this Proof of Authority?
+Discretion challenges can be generally understood as any case where a node's view of blockchain state warrants their suspicion.
+The programmatic or analogue execution of such deliberation is subjective, and not discussed in this document.
 
-No. Proof of Authority networks use entity (or identity...) authorization as a condition of block production. Endorsed transactions offers a way for node operators to have a _choice of authority_ when their node is faced with tough decisions.
+### Is this Proof-of-Authority?
 
-The cases in which these decisions would occur have been such that a pure proof-of-work consensus is at odds with social consensus. This approach intends to provide a tool whereby node operators can express and observe an aspect of the social and economic context, at the behest of the node operator.
+No. Proof of Authority networks use identity authorization as a condition of block production. The endorsement transactions pattern offers a way for node operators to have a _choice of trustee_ when their node is faced with tough decisions.
 
-This solution leaves as much of the "human arbitration" as possible in the hands of node operators as sovereign, democratic actors. 
+The cases in which these decisions would occur have been such that a pure proof-of-work consensus is at odds with social benefit. This approach intends to provide a tool whereby node operators can express and observe an aspect of the social and economic context, at the behest of the node operator.
 
-##### How is this different than other "Checkpoint" solutions?
+## How is this different than other "Checkpoint" solutions?
 
 This solution does not offer any canonical checkpoint, nor any means of establishing one. Most checkpointing solutions do this.
 
-This solution does not rely on any single oracle or oracles, whereas most checkpointing solutions look to core developers, adjacent networks, or hardcoded values for sources of truth. Instead, this solution offers a tool that _allows_ node operators to express and observe chain preference. The ultimate impact of the feature on the network remains strictly in the hands of the operators.
+This solution does not rely on any single oracle or oracles, whereas most checkpointing solutions look to core developers, adjacent networks, or hardcoded values for sources of truth. Instead, this solution offers an existing way for node operators to express and observe chain preference. The ultimate impact of the feature on the network remains strictly in the hands of the operators.
 
 ## Copyright/Licensing
 

From b6e769dcd2971ec123e863810fa2fd2fe56cbf8c Mon Sep 17 00:00:00 2001
From: meows <b5c6@protonmail.com>
Date: Sat, 1 May 2021 08:33:45 -0500
Subject: [PATCH 07/11] fix author identity

Signed-off-by: meows <b5c6@protonmail.com>
---
 _specs/ecip-endorser_transactions.md | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/_specs/ecip-endorser_transactions.md b/_specs/ecip-endorser_transactions.md
index 96348b8ef..c326eaf28 100644
--- a/_specs/ecip-endorser_transactions.md
+++ b/_specs/ecip-endorser_transactions.md
@@ -2,7 +2,7 @@
 ecip: TBD
 title: Endorser Transactions
 lang: en
-author: Isaac <b5c6@protonmail.com>
+author: Isaac (@meowsbits)
 discussions-to: TODO
 status: Draft
 type: Informational

From baf0a2f2ab75143a224f7cd5487ff9c5c140a101 Mon Sep 17 00:00:00 2001
From: meows <b5c6@protonmail.com>
Date: Sat, 1 May 2021 08:35:07 -0500
Subject: [PATCH 08/11] _specs: add discussions-to target

Date: 2021-05-01 08:35:07-05:00
Signed-off-by: meows <b5c6@protonmail.com>
---
 _specs/ecip-endorser_transactions.md | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/_specs/ecip-endorser_transactions.md b/_specs/ecip-endorser_transactions.md
index c326eaf28..b804b35c0 100644
--- a/_specs/ecip-endorser_transactions.md
+++ b/_specs/ecip-endorser_transactions.md
@@ -3,7 +3,7 @@ ecip: TBD
 title: Endorser Transactions
 lang: en
 author: Isaac (@meowsbits)
-discussions-to: TODO
+discussions-to: https://github.com/ethereumclassic/ECIPs/issues/423
 status: Draft
 type: Informational
 created: 2020-09-04

From c123d61e8981ec91c9cc52cc310570d266e55084 Mon Sep 17 00:00:00 2001
From: meows <b5c6@protonmail.com>
Date: Sat, 1 May 2021 08:39:18 -0500
Subject: [PATCH 09/11] simplify motivation pp

Signed-off-by: meows <b5c6@protonmail.com>
---
 _specs/ecip-endorser_transactions.md | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/_specs/ecip-endorser_transactions.md b/_specs/ecip-endorser_transactions.md
index b804b35c0..e1fe07736 100644
--- a/_specs/ecip-endorser_transactions.md
+++ b/_specs/ecip-endorser_transactions.md
@@ -21,7 +21,7 @@ Provide a way for node operators to prefer an arbitrary chain segment, and to us
 
 A low hash rate has caused Ethereum Classic's consensus algorithms to yield inconvenient and undesirable finality rates.
 
-The motivation of this proposal is to achieve a solution that alleviates a slow finality curve, while creatively managing the effects of tampering with existing "hard" consensus protocols.
+This proposal describes a method for collective chain discretion which is currently achievable, avoiding any required modifications to existing consensus protocol.
 
 ## Specification
 

From ae44ec8b99946b86a2da83b3ddf6b9d2c1a98cad Mon Sep 17 00:00:00 2001
From: meowsbits <b5c6@protonmail.com>
Date: Mon, 3 May 2021 13:53:41 -0500
Subject: [PATCH 10/11] fix subheading depth

---
 _specs/ecip-endorser_transactions.md | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/_specs/ecip-endorser_transactions.md b/_specs/ecip-endorser_transactions.md
index e1fe07736..f40d90a6f 100644
--- a/_specs/ecip-endorser_transactions.md
+++ b/_specs/ecip-endorser_transactions.md
@@ -83,7 +83,7 @@ No. Proof of Authority networks use identity authorization as a condition of blo
 
 The cases in which these decisions would occur have been such that a pure proof-of-work consensus is at odds with social benefit. This approach intends to provide a tool whereby node operators can express and observe an aspect of the social and economic context, at the behest of the node operator.
 
-## How is this different than other "Checkpoint" solutions?
+### How is this different than other "Checkpoint" solutions?
 
 This solution does not offer any canonical checkpoint, nor any means of establishing one. Most checkpointing solutions do this.
 

From f9691a9766a84a2f183da63c9212d7f2c655460a Mon Sep 17 00:00:00 2001
From: meowsbits <b5c6@protonmail.com>
Date: Mon, 3 May 2021 13:55:06 -0500
Subject: [PATCH 11/11] Update ecip-endorser_transactions.md

---
 _specs/ecip-endorser_transactions.md | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/_specs/ecip-endorser_transactions.md b/_specs/ecip-endorser_transactions.md
index f40d90a6f..0960f0fdd 100644
--- a/_specs/ecip-endorser_transactions.md
+++ b/_specs/ecip-endorser_transactions.md
@@ -31,14 +31,14 @@ Such transactions can be observed and acted upon in case of chain identification
 
 ### Endorser Transactions
 
-Transactions are made by an endorsing entity including information in the `data` field referencing the block hash (or some other unique characteristic) of some endorsed ancestor.
+Transactions are made by an endorsing entity including information in the `data` field referencing the block hash (or some other unique characteristic) of some endorsed ancestor block.
 
 The construction of this value could be of the form `0xff<block hash>`.
 
 ### Endorsement Observation
 
 A node registers some list of trustee entities from whom they wish to acknowledge endorsements.
-These entities are registered via transaction author identities (sender address, `from`).
+These entities are encoded as transaction author identities (sender address, `from`).
 
 Transactions with a `data` field value matching the general pattern described above are filtered from the set of on-chain transactions.
 This set of filtered transactions are filtered again for positive matches against the local list of trustee authors.
