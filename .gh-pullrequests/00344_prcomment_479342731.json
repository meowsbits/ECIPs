{
    "url": "https://api.github.com/repos/ethereumclassic/ECIPs/pulls/comments/479342731",
    "pull_request_review_id": 477776323,
    "id": 479342731,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM0MjczMQ==",
    "diff_hunk": "@@ -0,0 +1,157 @@\n+---\n+lang: en\n+ecip: ECIP-10XX\n+title: 51% Attack protection system based on Bitcoin Merged Mining\n+status: Draft\n+type: Standards Track\n+category: Core\n+discussions-to: https://github.com/ethereumclassic/ECIPs/issues/343\n+author: Sergio Lerner (@SergioDemianLerner) and Martin Medina (@martinmedina) \n+created: 2020-08-22\n+---\n+\n+## Abstract\n+\n+We present a proposal for ETC to use blocks mined with SHA-256 in Bitcoin to detect blockchain branches that have been mined in private and rise alarms that can prevent double-spend attacks. The proposal enables full nodes to take local decision to prevent certain attacks, but also the existence of a public view of the different competing ETC branches enables the use a Fork Monitoring System that can provide more detailed alerts to full nodes and to the community.  \n+\n+## Motivation\n+\n+During August 2020, Ethereum Classic was the target of two successful 51% attacks. The events have shown that the current levels of security provided by the Ethash miners are not enough.\n+\n+To make ETC more secure, this proposal presents an enhancement that allows full nodes to know if the best chain they are choosen was publicly available at the time of creation or it was hidden to the network. Two measures are computed by the node: the cumulative visibility score and the average visibility score over a period of 1000 blocks. The higher the cumulative score, the highest the amount of information that was timely made public about this blockchain. Alarms can be established when the average visibility score drops below a certain threshold, such as 70%. \n+ETC users can buy visibility proofs using a trustless contract running on the RSK blockchain.  A Visibility proof contains a checkpoint in the ETC blockchain that the user wants to be visible. The contract is queried by Bitcoin miners, which take the checkpointed block and publishes it in the coinbase of blocks. \n+\n+\n+By leveraging RSK networkâ€™s existing merged mining capabilities with Bitcoin, RSK can forward the ETC checkpoint information to Bitcoin miners in order to link it to a Bitcoin block and access Bitcoin SHA-256 security levels. The process that allows this is called Universal Merged Mining (UMM) and currently provides access to 100% of the Bitcoin Network Hashrate, at a frequency of one checkpoint every 20 minutes. \n+\n+\n+## Specification\n+\n+Changes must be done in different parts of the ETC protocol. A description of changes follows: \n+\n+### VisibilityProof\n+\n+Every block can be referenced by zero, one or more than one VisibilityProof messages. A VisibilityProof message that references a block can be included in any of the following 256 blocks of the referenced block. A VisibilityProof message therefore attests that Bitcoin hashrate has confirmed the referenced block.\n+\n+VisibilityProof messages are non-interactive SHA256 proofs-of-work and they can be verified by ETC without connecting to the Bitcoin network, similar to merge-mining proofs.\n+\n+A VisibilityProof score is measured by sum of the scores of the  Bitcoin headers that reference it, either from a single VisibilityProof message or from multiple messages. The score of a Bitcoin header is the difficulty of the block, specified in the header.\n+\n+Each VisibilityProof message *m* contains *P(m)* merge-mining proofs. Each merge-mining proof contains a Bitcoin header. Each header must have a hash that matches the difficulty established by the header.\n+\n+There are two types of Bitcoin headers: a **hit** and a **hit confirmation**. A hit must have a merge-mining proof that relates the header unequivocally to an ETC block. A hit confirmation is a child of a hit or a child of another hit confirmation. Hit confirmations are proven to not reference any other ETC block. Hit confirmations are \"unclaimed\" proof-of-work that ETC claims to protect from private miners. Hit confirmations must come after hits in the VisibilityProof message. Each hit confirmation must have the prior block header as parent. For example, the following is a valid VisibilityProof message (in brackets we show 16-byte truncated block hashes, merge-mining proofs are omitted):\n+\n+```\n+1. **hit**:  hash=0000000000000000000017b25971a701, blockHeight=644735, parent =0000000000000000000d9e9adbe0d01\n+2. **conf**: hash=0000000000000000000a34ee53a217b6, blockHeight=644736,  Parent=0000000000000000000017b25971a701\n+3. **conf**: hash=0000000000000000000db9f0fb12c4e9, blockHeight=644737, Parent=0000000000000000000a34ee53a217b6\n+4. **hit**:  hash=0000000000000000000a7470181b940a2, blockHeight=644740, Parent=0000000000000000000a34ee53a217b6\n+5. **conf**: hash=000000000000000000025fdd6edcee338, blockHeight=644741, Parent=0000000000000000000a7470181b940a\n+```\n+Hit Confirmations can prove not to contain the merge-mining tag and merge-mining tree root, or they can prove to contain the tree, but not an ETC block in the tree (proof of non-membership). To prove non-membership the Merge-Mining tree has nodes augmented with the minimum blockchain ID and maximum blockchain IDs of the contained children. ETC Blockchain ID is 61.\n+\n+### VisibilityProof Message Format\n+\n+The format of a VisibilityProof message is the following:\n+\n+```\n+VisibilityProof = { Payload , Signature } \n+Payload = { ETC-Block-Height, list of Merge-Mining-Proof [, ETC-Address] }\n+Merge-Mining-Proof = {Bitcoin-Header, Transaction-Membership-Proof,Coinbase-Tail, SHA256-Mid-State [,MM-Proof] [,Armadillo-Data] }\n+MM-Proof = { MM-Path, Terminal-Hash }\n+Bitcoin-Header = array[0..79] of Byte\n+Transaction-Membership-Proof = List of Bitcoin-Block-Hash\n+Bitcoin-Block-Hash = Array[0..31] of Byte\n+SHA256-Mid-State = Array[0..63] of Byte\n+MM-Path = List of Aug-Node-Plus-Hash\n+Aug-Node-Plus-Hash = {LeftMinID, RightMaxID, MM-Hash }\n+MM-Hash = Array[0..19] of Byte\n+LeftMinID = Uint32\n+RightMaxID = UInt32\n+Terminal-Hash = Array[0..19] of Byte\n+Armadillo-Data = Commit-To-Parents-Vector, Total-Difficulty-Compressed\n+Commits-To-Parent-Vector = Array[0..7] of Uint16\n+Total-Difficulty-Compressed = Uint64\n+```\n+\n+For Membership Proofs(\"RSKBLOCK:\"):\n+Terminal-Hash = Keccack(ChainID | ETC-Block-Hash | ETC-Address | Armadillo-Data)[0..11]\n+\n+Each Bitcoin header is associated with a its coinbase transaction by a Merkle membership proof for the Bitcoin Transaction Merkle Tree root. Not all the coinbase transaction needs to be presented, but only the tail, containing the merge-mining tag (\"RSKBLOCK:\"). The tail contains up to 128 bytes of coinbase transaction. To prove the tail corresponds to the coinbase transaction hash, a SHA256 mid-state is given.  This mid-state is extender with the tail to finalize the coinabse and obtain the coinbase transaction hash. Since the believed bit-security of a SHA256 freestart colission attack is much higher than the proof-of-work established by the Bitcoin Header, the compression provided by the coinbase tail does not pose a security risk. For hits (membership proofs) the tail contains the merge-mining tag, followed by the hash digest of the root of a  merge-mining tree of block hashes. For hit confirmations (non-membership proofs) the tail must not contain the tag or must contain the tag and the tree but without an ETC block in it. The Terminal-Hash is a 20-byte Keccak hash digest prefix of the ChaiID, the ETC-Block-Hash and the ETC-Address to pay the reward. This address can be the same as the miner address that includes the VisibilityProof or it can be a different address. Finally,  for a Merkle membership proof of the ETC block hash in this new tree is added to the proof. The ETC-Block-Hash must match the block in the ETC blockchain at height ETC-Block-Height.\n+\n+The ETC-Address is verified so that all blocks presented must belong to the same ETC-Address. If the miner address does not match the ETC-Address, then the ETC-Address fields must be present. The signature signs the Payload with the private key associated with the ETC-Address address. This ensures that the payload comes from the owner of the ETC-Address.  \n+\n+### Armadillo Data Verification\n+\n+The Armadillo Data allows a Fork Monitoring System to build a DAG or all the ETC forks in existence by connecting individual Bitcoin headers. The Armadillo Data is submitted along with the ETC-Address and ETC-Block-Hash to the Bitcoin mining system (through RSK). The ETC Blockchain consensus must verify that the Armadillo data is correct. Armadillo data contains 2 elements: the Commits-To-Parent-Vector and the Total-Difficulty-Compressed. The first element is an array of 8 element. Each element *e(i)* is an Uint16 that representsthe 16 less significant bits of the ETC block hash at position *n-(n mod 32)-(i***32)*, where *n* is the height of the block being checkpointed.\n+The total difficulty is compressed simply by taking the 64 most significative bits.\n+\n+\n+### Proof Size\n+\n+The size of a VisibilityProof message is variable. Normally it will contain a single Bitcoin block. However, it could contain more. We establish a maximum size of 10 Kilobytes per VisibilityProof proof. The additional bandwidth and storage space required by VisibilityProof messages is irrelevant to ETC.\n+\n+### Alarm Thresholds \n+\n+We propose that for each window of 1000 blocks (with a delay of 256 blocks), the average visibility score is computed. If the visibility score decreases below 80% of the score of the previous interval, the node will enter a safe-mode and stop confirming transactions (in case of an exchange, it will not confirm an ETC deposit).\n+\n+Because RSK handles the construction of the merge-mining tag to be included in  Bitcoin blocks, the ETC community will be able to detect immediately if the Bitcoin network is producing VisibilityProof for a bock different from the ETC honest bestchain. Such event can trigger automatic notifications to exchanges and other economic actors.\n+\n+### Block Format\n+\n+To avoid changing the ETC block header format, the VisibilityProof proof can be included as an uncle, with a specil magic prefix to distiguish it from normal uncles. It can also be added in the ExtraData field. Of course, a new special field visibilityProofs can be added to the ETC block header.\n+\n+<< The exact format will be specified later >>\n+\n+### Inclusion of VisibilityProof Proofs\n+\n+On a first version, EtHash miners will be the only ones that will have the possibility to add VisibilityProofs to their blocks.\n+\n+In the future, the ETC network can propagate VisibilityProofs messages and we can let any user participate and collect fees from this system. This requires no changes to consensus. \n+\n+### Rewards\n+\n+If a miner decides to add a VisibilityProof message in a slot, it will be rewarded by an extra subsidy. To prevent changing the ETC supply function, the extra subsidy will be obtained by diluting all remaining block subsidies by a fixed percentage. The exact amount is to be decided by the community but we propose this to be 10% of the current subsidy, starting at 1% and increasing until 10% during a period of 3 months. This will allow for EtHash miners to adapt and provides enough incentives for them to start using the RSK UMM system to obtain VisibilityProofs for their blocks.\n+\n+To enable the creation of an independent and open VisibilityProofs market, a small percentage (i.e. 5%) of the Visibility subsidy is paid to the miner who included the VisibilityProof message. The remainder is paid to the ETC-Address (funds are directly added to the account balance without contract code execution). If the miner address matches the ETC-Address, then all reward will be paid to the same account.\n+\n+\n+### Timestamp Validation\n+\n+The timestamp of Bitcoin hit header must be not higher than 10 minutes and not lower than 10 minutes of thetimestamp of the ETC checkpoint referenced by the VisibilityProof. This prevents Bitcoin miners from creating visibility proofs for old or future branches of the ETC blockchain.\n+\n+### JSON-RPC Interface\n+Expose two new methods:\n+- *getSHAWork:* retrieves SHAsh to be used for merged mining with Bitcoin.\n+- *submitSHAPoW:* receives all the needed elements to validate the PoW and then create the UMM uncle block.\n+\n+\n+## Rationale\n+\n+The spirit of this proposal is to present a simple way to provide ETC with an otional system that can temporarily or permanently protect it from 51% attacks by establishing a strong deterrent. To achieve that:\n+\n+* VisibilityProof messages are included as uncles so the system is the least invasive way as possible.\n+* In the current version, VisibilityProof messages are included by mining nodes. However, the system allows any user to participate in the VisibilityProof system.  This extension requires adding a new message to the wire protocol the relay of VisibilityProof proofs. \n+* By having a non-mandatory addition of VisibilityProof messages, ETC blockchain can keep working normally even if with no VisibilityProof on the blocks. \n+\n+## Universal Merged Mining\n+\n+Universal Merged Mining offers access to Bitcoin SHA-256 PoW by forwarding the to-be-validated information through smart-contracts deployed on the RSK blockchain. ",
    "path": "_specs/ecip-51-attack-protection-system.md",
    "position": 139,
    "original_position": 139,
    "commit_id": "b254e02e4654758d68647da07b75555d25054e1c",
    "original_commit_id": "8137b6c7291bc9b675eb00b69d81b7b94dfbde27",
    "user": {
      "login": "SergioDemianLerner",
      "id": 1752347,
      "node_id": "MDQ6VXNlcjE3NTIzNDc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1752347?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SergioDemianLerner",
      "html_url": "https://github.com/SergioDemianLerner",
      "followers_url": "https://api.github.com/users/SergioDemianLerner/followers",
      "following_url": "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
      "gists_url": "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SergioDemianLerner/subscriptions",
      "organizations_url": "https://api.github.com/users/SergioDemianLerner/orgs",
      "repos_url": "https://api.github.com/users/SergioDemianLerner/repos",
      "events_url": "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SergioDemianLerner/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "RSK has direct access to ~40% (sometimes >50%) to the Bitcoin miners. Smart contracts can communicate directly with Bitcoin miners, and Bitcoin miners can collect revenue directly from these smart-contracts. By using the auction contracts in RSK the ETC community leverages on this established technical and economic channel. \r\n ",
    "created_at": "2020-08-28T14:29:17Z",
    "updated_at": "2020-08-28T15:15:26Z",
    "html_url": "https://github.com/ethereumclassic/ECIPs/pull/344#discussion_r479342731",
    "pull_request_url": "https://api.github.com/repos/ethereumclassic/ECIPs/pulls/344",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/ethereumclassic/ECIPs/pulls/comments/479342731"
      },
      "html": {
        "href": "https://github.com/ethereumclassic/ECIPs/pull/344#discussion_r479342731"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/ethereumclassic/ECIPs/pulls/344"
      }
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 139,
    "original_line": 139,
    "side": "RIGHT",
    "in_reply_to_id": 479133012
  }