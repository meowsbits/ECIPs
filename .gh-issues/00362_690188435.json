{
    "url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/comments/690188435",
    "html_url": "https://github.com/ethereumclassic/ECIPs/issues/362#issuecomment-690188435",
    "issue_url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/362",
    "id": 690188435,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MDE4ODQzNQ==",
    "user": {
      "login": "q9f",
      "id": 58883403,
      "node_id": "MDQ6VXNlcjU4ODgzNDAz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/58883403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/q9f",
      "html_url": "https://github.com/q9f",
      "followers_url": "https://api.github.com/users/q9f/followers",
      "following_url": "https://api.github.com/users/q9f/following{/other_user}",
      "gists_url": "https://api.github.com/users/q9f/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/q9f/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/q9f/subscriptions",
      "organizations_url": "https://api.github.com/users/q9f/orgs",
      "repos_url": "https://api.github.com/users/q9f/repos",
      "events_url": "https://api.github.com/users/q9f/events{/privacy}",
      "received_events_url": "https://api.github.com/users/q9f/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-10T11:28:37Z",
    "updated_at": "2020-09-10T11:28:37Z",
    "author_association": "MEMBER",
    "body": "**ECIP-1049:** Just some findings on interoberability - I did some research on the implications of vanilla Sha3 and I would strongly encourage to go for Keccak256 rather than Sha3. \r\n\r\nThe main reason is having an OPCODE `0x21 SHA3` is very unlikely to convince the Ethereum Foundation community to realize and accept. Going solo with such an OPCODE on Ethereum Classic would mean we would have to fork all tooling including Solidity compiler. \r\n\r\nAs an alternative, we could implement a SHA3 precompile but that's also unlikely on Ethereum Foundation network. That way we might _lose_ the freshly gained _protocol parity_ indefinitely. Adopting Keccak256 does not only reduce the complexity but also retains highest compatibility between these ecosystems without much effort as the OPCODE `0x20 KECCAK` already exists for both chains and no further tooling would be required.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/comments/690188435/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }