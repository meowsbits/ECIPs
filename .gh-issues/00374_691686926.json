{
    "url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/comments/691686926",
    "html_url": "https://github.com/ethereumclassic/ECIPs/issues/374#issuecomment-691686926",
    "issue_url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/374",
    "id": 691686926,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MTY4NjkyNg==",
    "user": {
      "login": "meowsbits",
      "id": 45600330,
      "node_id": "MDQ6VXNlcjQ1NjAwMzMw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/45600330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meowsbits",
      "html_url": "https://github.com/meowsbits",
      "followers_url": "https://api.github.com/users/meowsbits/followers",
      "following_url": "https://api.github.com/users/meowsbits/following{/other_user}",
      "gists_url": "https://api.github.com/users/meowsbits/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meowsbits/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meowsbits/subscriptions",
      "organizations_url": "https://api.github.com/users/meowsbits/orgs",
      "repos_url": "https://api.github.com/users/meowsbits/repos",
      "events_url": "https://api.github.com/users/meowsbits/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meowsbits/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-13T15:38:29Z",
    "updated_at": "2020-09-13T15:53:53Z",
    "author_association": "MEMBER",
    "body": "> All observable discrete and non-unified arbitration points in subjective acceptance are technically exploitable.\r\n\r\nActually, even the activation block (say, a future, non-zero block) is exploitable, if an attacker can propose an adversarial segment when they first receive the broadcast of block `n`. To address this (although I think it's practically a rather edge case), one option would be to randomly determine the actual activation using the block with number `n` as a \"seed,\" ala\r\n\r\n```go\r\n// concreteActivationBlock returns the \"real\" activation number as a random but objective value generated from a specified \"imaginary\" value.\r\nfunc (bc *BlockChain) concreteActivationBlock(imaginaryNumber uint64) uint64 {\r\n    if block := bc.GetBlockByNumber(imaginaryNumber); block == nil {\r\n        return 9999999999999\r\n    } else {\r\n        return imaginaryNumber + (block.Nonce.Uint64() % 1000)\r\n    }\r\n}\r\n```\r\n\r\nBut again, this only makes life a little more annoying for an adversary, it doesn't perfectly solve it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/comments/691686926/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }