{
    "url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/comments/691992432",
    "html_url": "https://github.com/ethereumclassic/ECIPs/issues/374#issuecomment-691992432",
    "issue_url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/374",
    "id": 691992432,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MTk5MjQzMg==",
    "user": {
      "login": "realcodywburns",
      "id": 13103499,
      "node_id": "MDQ6VXNlcjEzMTAzNDk5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13103499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/realcodywburns",
      "html_url": "https://github.com/realcodywburns",
      "followers_url": "https://api.github.com/users/realcodywburns/followers",
      "following_url": "https://api.github.com/users/realcodywburns/following{/other_user}",
      "gists_url": "https://api.github.com/users/realcodywburns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/realcodywburns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/realcodywburns/subscriptions",
      "organizations_url": "https://api.github.com/users/realcodywburns/orgs",
      "repos_url": "https://api.github.com/users/realcodywburns/repos",
      "events_url": "https://api.github.com/users/realcodywburns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/realcodywburns/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-14T11:27:57Z",
    "updated_at": "2020-09-14T11:27:57Z",
    "author_association": "MEMBER",
    "body": "it is trivial for malicious people to attack now.\r\n\r\nNeither solution should ever resolve to a minority fork given enough time. So even if the minority of nodes have either solution they should eventually reorg to the same chain as the unprotected nodes. This is at least the case with pg. if not so with mess, then it has to be implemented as a fork.\r\n\r\nThe activation is transparent to both sides. Setting the block at genesis(or some block infeasibly in the past) would mean all upgraded nodes are protected and give reason to upgrade as well as give us a metric of how protected the network really is. The bad guys are watching us build the defense in real time, there is no need for a grand opening.  \r\n\r\n Judging from etcnodes, most nodes are very slow to upgrade. Until either solution protects 51% of the network, there is risk that the majority could be on a different fork and they will have to wait until the chain eventually resolves. pirlguard with 250 block penaltyCheckLength is ~30k blocks until it resolves or n*(n/2) assuming it is a sustained attack. \r\n\r\nThe attack pattern we have seen appears to be massive reorgs broadcast at once and then the miner disappear. both solutions work best on the attacker not activly mining openly with a majority hash rate. If they are actively mining,  The pg solution gives honest nodes an opportunity to defend the minority fork until the majority head is 30k beyond it before accepting. It is the same as saying 250 block reorgs are the max normal reorg, if a reorg is longer than 250 blocks it needs to be 30k blocks long to accept. \r\n\r\nThe hard stops are easily calculated and are goal posts. if someone is able to trivally make 30k reorgs we are they make the chain. It does open the door fo reorg as a service, but thats a different topic all together. There is 3x the network hashrate available for rent so the difficulty is somewhat unreliable. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/comments/691992432/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }