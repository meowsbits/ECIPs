{
    "url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/comments/692468552",
    "html_url": "https://github.com/ethereumclassic/ECIPs/issues/374#issuecomment-692468552",
    "issue_url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/374",
    "id": 692468552,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MjQ2ODU1Mg==",
    "user": {
      "login": "realcodywburns",
      "id": 13103499,
      "node_id": "MDQ6VXNlcjEzMTAzNDk5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13103499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/realcodywburns",
      "html_url": "https://github.com/realcodywburns",
      "followers_url": "https://api.github.com/users/realcodywburns/followers",
      "following_url": "https://api.github.com/users/realcodywburns/following{/other_user}",
      "gists_url": "https://api.github.com/users/realcodywburns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/realcodywburns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/realcodywburns/subscriptions",
      "organizations_url": "https://api.github.com/users/realcodywburns/orgs",
      "repos_url": "https://api.github.com/users/realcodywburns/repos",
      "events_url": "https://api.github.com/users/realcodywburns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/realcodywburns/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-15T05:12:22Z",
    "updated_at": "2020-09-15T05:12:22Z",
    "author_association": "MEMBER",
    "body": "No real technical downsides. \r\n\r\nThe ones I can think of: \r\n  1) an attack occurs between code release and the activation block then all the nodes could have been protected if it was active by default when upgrading. \r\n 2) It will give a false sense of security if the majority of the nodes are not capable of using mess on the blocknumber. Then in the event of an attack mess looks like it was unsuccessful in spite of it not being capable of working\r\n 3) 11% of the node on mainnet are running openethereum, 13% run multigeth still for some reason; only about 13% are > v1.11.13   The likelihood of the entire network coordinating together to update to the latest version of any node software is slim. \r\n\r\nIt would be an annoyance for someone to trivially reorg at the limit, but it wouldn't be sustainable and is the same as if they were attacking the safety window in mess. These attacks are possible now and are uncommon. In either case, double spends would be under the window of reasonable actors tolerances and It has been years since exchanges have used such short confirmation times. The appropriate thing for a node to do if a node is receiving several invalid blocks is to disconnect for the peer. \r\n\r\nThe Safety Interval is interesting for edge cases also. If an attacker had some amount of hash > network hash power, couldn't they artificially raise the difficulty on the main chain and then abandon it for a privately mined a fork while the low hash rate chain struggles with too much difficulty? I think the longest block time on the network were shorter than what is proposed though.   \r\n\r\n20 is very low for pg on a public chain and would be trivial for attackers we have been seeing to overcome. The difficulty multipliers in pg max out at 50 gh so it is essentially useless as is and would need to be adjusted. \r\n\r\nI like flag options, it lets other custom configurations use mess or whatever if need be. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/comments/692468552/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }