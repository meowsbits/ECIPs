{
    "url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/comments/587537911",
    "html_url": "https://github.com/ethereumclassic/ECIPs/issues/294#issuecomment-587537911",
    "issue_url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/294",
    "id": 587537911,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzUzNzkxMQ==",
    "user": {
      "login": "meowsbits",
      "id": 45600330,
      "node_id": "MDQ6VXNlcjQ1NjAwMzMw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/45600330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meowsbits",
      "html_url": "https://github.com/meowsbits",
      "followers_url": "https://api.github.com/users/meowsbits/followers",
      "following_url": "https://api.github.com/users/meowsbits/following{/other_user}",
      "gists_url": "https://api.github.com/users/meowsbits/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meowsbits/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meowsbits/subscriptions",
      "organizations_url": "https://api.github.com/users/meowsbits/orgs",
      "repos_url": "https://api.github.com/users/meowsbits/repos",
      "events_url": "https://api.github.com/users/meowsbits/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meowsbits/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-18T16:06:49Z",
    "updated_at": "2020-02-18T16:10:20Z",
    "author_association": "MEMBER",
    "body": "> [[@soc1c]](https://github.com/ethereumclassic/ECIPs/pull/291#pullrequestreview-360328878) Can you expand on how this affects classic client? Do I read correctly that we will have this in the clients upstream anyways? \r\n\r\n__How this effects classic clients:__\r\n\r\nThe `eth/64` networking protocol (currently actively implemented by multi-geth and go-ethereum, at least) introduces the `forkid` field in peer to peer communication.\r\n\r\nThe value for `forkid` is derived from what the client considers to be \"Forks\" for the network it's currently configured to operate. For any given set of Forks, a different value is determined (eg. fork blocks at `[42, 196, 255]`=`forkid:0x95de` vs. `[42, 255]`=`forkid:0xdd14`).\r\n\r\nIn order for Classic clients to derive equal `forkid` values, they need to use equalivalent (canonical) Fork-sets. If they don't, they can generate different `forkid` values (eg. if Parity thinks `1920000` is a Fork block, but multi-geth doesn't think so), and then will have a hard time connecting with one another (if possible at all).\r\n\r\nThis specification intends to establish a shared understanding of what constitutes the \"Forks set\" on ETC, so that when speaking eth/64, the clients can derive the same `forkid` and thus use shared vocabulary.\r\n\r\n__... we will have this in the clients upstream anyways?__\r\n\r\n`forkid` derivation logic (and associated specification implementations) are also supported by clients used on the Ethereum Foundation networks; so yes, multi-geth gets this _logic_ for free from go-ethereum.\r\n\r\nThis specification does not modify or extend the `forkid` logic (ie the function). It only asserts the values that should be passed to that function, in order that we can expect consistent results between clients running ETC configurations.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/comments/587537911/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    }
  }