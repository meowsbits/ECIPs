{
    "url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/comments/692036217",
    "html_url": "https://github.com/ethereumclassic/ECIPs/issues/374#issuecomment-692036217",
    "issue_url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/374",
    "id": 692036217,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MjAzNjIxNw==",
    "user": {
      "login": "meowsbits",
      "id": 45600330,
      "node_id": "MDQ6VXNlcjQ1NjAwMzMw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/45600330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meowsbits",
      "html_url": "https://github.com/meowsbits",
      "followers_url": "https://api.github.com/users/meowsbits/followers",
      "following_url": "https://api.github.com/users/meowsbits/following{/other_user}",
      "gists_url": "https://api.github.com/users/meowsbits/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meowsbits/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meowsbits/subscriptions",
      "organizations_url": "https://api.github.com/users/meowsbits/orgs",
      "repos_url": "https://api.github.com/users/meowsbits/repos",
      "events_url": "https://api.github.com/users/meowsbits/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meowsbits/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-14T13:01:14Z",
    "updated_at": "2020-09-14T13:01:14Z",
    "author_association": "MEMBER",
    "body": "Gotcha.\r\n\r\n> Neither solution should ever resolve to a minority fork given enough time\r\n\r\nYou're right. There are, IMO, important nuances though: How long is enough time? (what conditions allow resolution)? And, how robust are they to circumstances that create the bifurcation in the first place?\r\n\r\nI've been trying to figure out a \"general principle\"/heuristic for these evaluating these subjective arbitrations. The best I have now is \"rough edges are repulsive.\" Where acceptance arbitrations that use \"goal post\" numbers in a yea/nea way (like pg's [20](https://git.pirl.io/community/pirl/-/blob/master/params/protocol_params.go#L147) or 250) are more likely to present a vulnerability to partitioning than \"smooth edges.\" \r\n\r\nThe condition for bifiurcation/resolution in pg is chain length, which can be established and maintained by an adversary with enough capital quite simply (create fork with 20 or 250 block reorg(s) to hit the _n vs. n-1_ network discrepancy, maintain length as desired, or repeat). The necessary condition for a MESS partition(s) is a near-constant total difficulty ratio, which, even for an ultra-capable attacker, would be extremely (and increasingly) challenging and risky to establish and maintain over time.\r\n\r\n> The activation is transparent to both sides. Setting the block at genesis(or some block in the past) would mean all upgraded nodes are protected and give reason to upgrade as well as give us a metric of how protected the network really is. The bad guys are watching us build the defense in real time, there is no need for a grand opening.\r\n\r\nI hear you. My reasoning for an activation number is not really \"a grand opening.\" Its:\r\n- If nodes are slow to upgrade, then if they upgrade _after_ the activation number, the net effect is the same.\r\n- If (the mining subset of) nodes upgrade on time, then the opportunity to stage a targeted attack is limited to a single block (rather than the duration of the population upgrade).\r\n- It's a familiar pattern and gives people a number to hold on to.\r\n\r\nDo you see any _downsides_ to the activation number that I'm not seeing?\r\n\r\nAnyways, and by the way, there's currently a flag [`--ecbp1000=<number>`](https://github.com/etclabscore/core-geth/pull/181/commits/e0cf2a0a16bcdba4114d96822ea6f18d5c6d0ba8) and [an RPC method `admin_ecbp1100(number)`](https://github.com/etclabscore/core-geth/pull/181/commits/c8234bb76f805dc2e02e496c5f154563f6b25f32) in core-geth that allow the operator an accessible override if they want.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/comments/692036217/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }