{
    "url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/comments/686250338",
    "html_url": "https://github.com/ethereumclassic/ECIPs/issues/13#issuecomment-686250338",
    "issue_url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/13",
    "id": 686250338,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjI1MDMzOA==",
    "user": {
      "login": "block-head",
      "id": 65371198,
      "node_id": "MDQ6VXNlcjY1MzcxMTk4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/65371198?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/block-head",
      "html_url": "https://github.com/block-head",
      "followers_url": "https://api.github.com/users/block-head/followers",
      "following_url": "https://api.github.com/users/block-head/following{/other_user}",
      "gists_url": "https://api.github.com/users/block-head/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/block-head/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/block-head/subscriptions",
      "organizations_url": "https://api.github.com/users/block-head/orgs",
      "repos_url": "https://api.github.com/users/block-head/repos",
      "events_url": "https://api.github.com/users/block-head/events{/privacy}",
      "received_events_url": "https://api.github.com/users/block-head/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-03T04:48:52Z",
    "updated_at": "2020-09-03T04:48:52Z",
    "author_association": "NONE",
    "body": "I'd like to raise a formal objection to the design.\r\n\r\nThis ECIP proposes an inneficient change in the hashing process that will increase the maintenence burden on clients derived from Mainnet clients.  The `mixHash` is portrayed as some appendage of the `Ethash` algorithm, when in fact it has no connection.  `mixHash` is the hash of the values in the block header _except_ the nonce and the mixhash itself.  The Ethash algorithm then generates nonces and concatenates it with the mix hash to calculate the result from ethash, it is this (unrecorded) output that is used to gauge the validity against the difficulty field.\r\n\r\nThis construction differs from bitcoin.  Bitcoin block hashes are the values compared against the difficulty.  However for ethereum this would necessitate running ethash for simple block access, which is why the `mixhash` solution is in place, to prevent expensive hashing when determining the 'hash' of the block.\r\n\r\nThis has one distinct advantage:  All 256 bytes of the block hash are meaningful.  In bitcoin one quarter to one third of the hash bits are lost to the partial pre-image search, and reduces the usability of the hash as an index.\r\n\r\nI would recommend that the ECIP be re-written to preserve the `mixhash` field as it already exists, and then concatinate the mixHash and nonce and do an SHA3 at that point, simply substituting the SHA3/KECCAK-256 algorithm for the Ethash algoritm.\r\n\r\nIf this recommendation is not followed I recommend this ECIP be rejected for technical reasons, as it will increase the complexity of the associated software in paths that only Ethereum Classic would use.  Ethereum Classic implementation teams do not have a good track record adding code that has not already been validated my Etherehum Mainnet.  The amount of needed changes should be reduced to an absolute minimum.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/comments/686250338/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }