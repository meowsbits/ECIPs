{
    "url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/comments/678991334",
    "html_url": "https://github.com/ethereumclassic/ECIPs/issues/327#issuecomment-678991334",
    "issue_url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/327",
    "id": 678991334,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODk5MTMzNA==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-24T08:38:39Z",
    "updated_at": "2020-08-24T08:43:06Z",
    "author_association": "MEMBER",
    "body": "@hitchcott \r\n\r\n>> It is worth to mention that isolating a node is not an easy task already. We can't just tell a node \"Please drop your current connections and connect to mine nodes instead\".\r\n\r\n>But the latter method, table poisoning, appears to be exactly this.\r\n\r\nIn any case the main vulnerability exploited in this attack scenario is the fact that a node has empty `table` upon reboot and the attacker has some methods of filling the `db` of the victim with his malicious nodes. \r\n\r\nSimply having two nodes and never rebooting them at the same time will solve the problem per se.\r\n\r\n>In any case, the idea would not be to target a single node, but target groups of mining pools so you create a chain partition that lasts for 60+ blocks\r\n\r\nMining pools have all the incentives to retain the consensus state. They also have the measures to prevent any attack i.e. having \"private\" observer nodes and background nodes. Even if mining pools will refuse to do so then miners will switch their hashing powers because miners are incentivised to be on a chain which is supported by exchanges but not pool operators. As the result the system tends to self-balance and remain in a consensus state.\r\n\r\n>It may be the case that it only doesn't happen because there's no incentive to have this kind of attack. It may be that it would only happen when a large market cap chain implements a consensus protocol that incentivises this attack.\r\n\r\nIn case of 51%-attacks if something is vulnerable then it is attacked (no matter small cap or large cap). In case of this attack there is no reason to assume that the system of incentives will be somewhat different from that in other types of attacks.\r\n\r\n>>If the cost of the attack is not known and taking control over the 100% of the nodes of the network is not possible even in theory then the attack has little to no chance of success.\r\n\r\n>This assumption is incorrect. You don't need to take control of 100% of the nodes; you just need to partition the network temporarily.\r\n\r\n**And you can't do so if you do not even know which nodes to target.** In case a victim has a background node and you don't know which node of the network it is - you have little to no chance to cause the network split by just isolating random nodes and hoping that it will be the victims node.\r\n\r\n>>However this would not happen if some of this nodes have a whitelisted private connection with another distanced node to compare with.\r\n\r\n>Perhaps, but can we guaruntee this? Can we also guaruntee that those whitelisted nodes cannot be censored or DDOSd? Could an attacker not partition the network in a way that maintains some of these whitelisted connections? Could a state actor partition the network for 60+ blocks?\r\n\r\nAll the network participants have incentives to adopt the \"an isolated node can not trust itself\" paradigm and thus resist the attack.\r\n- Exchanges are not interested in losing funds.\r\n- Mining pools are not interested in mining a chain that is not adopted by exchanges.\r\n- Miners are not interested in supporting pools that mine improper chains.\r\n\r\nThe whole ecosystem is only interested in remaining in a consensus state.\r\n\r\n\r\n>The politics are clearly different because ETC poses more of a threat and is disliked by more people than other smaller chains.\r\n>Additionally, the market cap metric matters because by sabotaging the ETC network it is easier to open short positions that do not effect the price of ETC due to having a highly liquid market.\r\n\r\nYour statement does not correspond with what we can see in reality. In case of other types of attacks (including 51%-attacks) this difference does not play any role because all chains are 51%-attacksed as long as they are vulnerable and the market cap make no difference. There is no reason to assume that in case of this particular attack the system of incentives is different.\r\n\r\n>It is subjective because it does not rely on an objective point of reference -- i.e. the longest chain based on Proof of Work.\r\n>PirlGuard is subjective because it relies on the state of the network from the point of view of the node; it is literally subjective.\r\n\r\nIt may be subjective from the point of view of a single node. From the point of view of the external observer it is always possible to determine which chain is valid objectively.\r\n\r\nHowever if all the existing chains are known at the same time then it is always possible to determine which chain is the correct chain by rolling back the time to the moment of the split and determining which block of two blocks with the number `split_block_number + finality_threshold` is better. Then the chain with the better block is considered valid.\r\n\r\nAgain, the reason of the split in this case is not the consensus shortcoming but the imperfection of hardware or connection.\r\n\r\n>The problem is not with defending the node from eclipse attacks but dealing with the aftermath of eclipse attacks.\r\n\r\nYou are correct - in case of a network split mitigation of the consequences will be harder for those network participants who weren't prepared.\r\n\r\nOn the other hand, the network participant is obliged to pay attention to the network mechanism that he uses. The same logic can be applied to mining pools that have super-laggy nodes and therefore always mine orphaned blocks.\r\n\r\nIt is always possible to invent a way to have bad hardware / bad connection / or not follow the security guidelines and thus suffer from your own irresponsibility. This is not a problem of the consensus model already.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/comments/678991334/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }