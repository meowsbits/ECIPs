{
    "url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/comments/676387082",
    "html_url": "https://github.com/ethereumclassic/ECIPs/issues/327#issuecomment-676387082",
    "issue_url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/327",
    "id": 676387082,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NjM4NzA4Mg==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-19T13:47:44Z",
    "updated_at": "2020-08-20T10:02:00Z",
    "author_association": "MEMBER",
    "body": "# Eclipse attack step-by-step\r\n\r\n>Eclipse Attack enables a would-be bad actor to isolate and subsequently prevent their target from attaining a true picture of real network activity and the current ledger state.\r\n\r\n>This attack is made possible because a decentralized network does not let all nodes simultaneously connect to all other nodes on the network. Instead, for efficiency, a node connects to a select group of other nodes, who in turn are connected to a select group of their own. For example, a Bitcoin node has eight outgoing connections; Ethereum 13.\r\n\r\nThe goal of the eclipse attack is to isolate a node or a group of nodes and then force an isolated node to split off from the main network because the node does not even know that the \"main network\" exists.\r\n\r\n![Ecplipse_1](https://user-images.githubusercontent.com/26142412/90631087-2fb7b700-e233-11ea-92d1-35feee034e02.png)\r\n\r\nHere is an illustration of the network. We assume that the green node will be targeted by the attacker. Black nodes are random nodes of the network that remain in a consensus state.\r\n\r\n## Step 1: The attacker is launching his own nodes\r\n\r\n![Ecplipse_3](https://user-images.githubusercontent.com/26142412/90631155-48c06800-e233-11ea-8d43-2cb1f4929542.png)\r\n\r\nIt is worth to mention that the attacker must be sure that his malicious nodes are connected with the targeted nodes and there are no external peers that could suggest their own version of the chain to the targeted node.\r\n\r\nThe targeted node is always trying to follow the consensus rules. As the result if the attacker will create a longer chain at some point of time and let targeted node sync it then the targeted node will broadcast the attackers chain to the network and the rest of the mainnet nodes would sync it thus the attack will not be possible in this case because the nodes will not split off and all of them (including pools and hashrate sources) will just adop the attackers chain.\r\n\r\nThe goal of the attacker is to develop a chain and broadcast it to the targeted node so that this targeted node would adopt the chain but not to broadcast it to the rest of the mainnet nodes so that they adopt this chain at the same time.\r\n\r\nIf the attackers nodes would attempt to broadcast their version of the chain to the targeted node but the targeted node will still have connections to the nodes of the main network then the targeted node will follow the consensus of the main network and the attack will fail.\r\n\r\n![Ecplipse_4](https://user-images.githubusercontent.com/26142412/90635654-8248a180-e23a-11ea-9bd4-5a833981d3b6.png)\r\n\r\nA node may only follow attackers chain IF (1) the attackers chain does not violate any consensus rules written in the code and (2) there is no other chain that is better than the attackers chain. Otherwise the targeted node will refuse to follow the suggested attackers chain.\r\n\r\n![Ecplipse_5](https://user-images.githubusercontent.com/26142412/90635896-da7fa380-e23a-11ea-80b1-ee31100abc7b.png)\r\n\r\nIn order to perform a successful eclipse attack the attacker must develop a chain that does not violate any consensus rules (i.e. the attacker still need a decent share of the mainnet hashrate) and make sure that the targeted node does not have any connections to the mainnet nodes that would suggest the mainnet version of the chain against the attackers chain.\r\n\r\n## Step 2: The attacker is isolating the targeted node\r\n\r\n![Ecplipse_6](https://user-images.githubusercontent.com/26142412/90636367-8de89800-e23b-11ea-8dc6-d2969d361bfb.png)\r\n\r\n**It is worth to mention that isolating a node is not an easy task already. We can't just tell a node \"Please drop your current connections and connect to mine nodes instead\".**\r\n\r\nHere we will not investigate the methods of doing so but it should be noted that there were no successful eclipse attacks in the industry that caused any substantial damage unlike 51%-attacks which are a real threat.\r\n\r\n## Step 3: The attacker is creating his own chain and tricking the targeted node to follow it\r\n\r\n![Ecplipse_7](https://user-images.githubusercontent.com/26142412/90636867-49a9c780-e23c-11ea-985b-99569579b542.png)\r\n\r\nIn this example the attacker is starting to develop his own chain once it is certain that the targeted node does not have any connections with the mainnet nodes.\r\n\r\nThe attacker should not broadcast his version of the network to any mainnet nodes and drop any connections with the mainnet.\r\n\r\n![Ecplipse_8](https://user-images.githubusercontent.com/26142412/90637230-ca68c380-e23c-11ea-9b15-518dd20ad0b2.png)\r\n\r\nIn this case the attacker is creating an isolated environment for the targeted node surrounded by malicious nodes interconnected with each other.\r\n\r\n![Ecplipse_9](https://user-images.githubusercontent.com/26142412/90637245-ce94e100-e23c-11ea-8a0b-815400517f42.png)\r\n\r\n## Step 4: Damaging the network\r\n\r\nThe attacker can perform his actions once the targeted node is isolated. In case the attackers goal is to perform any double spendings and the targeted node is an exchange node then the attacker should deposit his funds and make the trades.\r\n\r\nIn case the attackers goal is to disrupt the network then the attacker must maintain the network for more than `PenaltyCheckLength()` blocks. In this case the targeted node would not sync again with the mainnet even if it will receive the \"mainnet version of the chain\" from any mainnet node as it will cause a long reorganization of the targeted node's chain.\r\n\r\n## What if the targeted node has a constant connection to a certain whitelisted mainnet node?\r\n\r\nIt should be noted that a node can only be \"trusted\" if it belongs to the same owner. In reality exchanges and block explorers already have \"background\" nodes so they are not prone to this kind of attacks. \r\n\r\n![Ecplipse_10](https://user-images.githubusercontent.com/26142412/90639450-ba9eae80-e23f-11ea-86ae-65b083a86777.png)\r\n\r\nIn this case a node has connection to some other node it will not follow the attackers chain. \r\n\r\n![Ecplipse_13](https://user-images.githubusercontent.com/26142412/90639762-34cf3300-e240-11ea-80c3-f7382434cb3f.png)\r\n\r\nEven if there is a single node that can operate as a bridge between the targeted node and mainnet nodes - the attack will fail. There are two possible scenarios of the attack failure: (1) if the attacker has developed the longest chain then it will be adopted by the mainnet nodes and (2) if the attacker has developed a shorter chain then the targeted node will reject it and resync with the mainnet as soon as the attacker will attempt to suggest his version of the chain.\r\n\r\nThe attacker, however, may attempt to isolate the whitelisted node as well. This will tremendously increase the complexity of the attack.\r\n\r\n![Ecplipse_14](https://user-images.githubusercontent.com/26142412/90640046-8f688f00-e240-11ea-80b2-2d64b5776940.png)\r\n\r\n## What if this connection between the targeted node and the whitelisted node belonging to the owner of the targeted node is private?\r\n\r\n![Ecplipse_11](https://user-images.githubusercontent.com/26142412/90640265-d48cc100-e240-11ea-87d6-ccea9014559a.png)\r\n\r\nIn this case the attacker does not know which node to target.\r\n\r\n![Ecplipse_15](https://user-images.githubusercontent.com/26142412/90640332-e9695480-e240-11ea-9c87-dec3aba9e962.png)\r\n\r\nThis effectively turns the attack into gambling as the attacker does not know whether he have any chance to succeed or not unless he has 100% control over the all nodes of the network.\r\n\r\n![Ecplipse_16](https://user-images.githubusercontent.com/26142412/90640453-0b62d700-e241-11ea-9821-918ce4481749.png)\r\n\r\n## What if these nodes are not even whitelisting each other?\r\n\r\nIn reality these nodes do not even need to be interconnected with each other. The above example was the simplest solution but in reality this is not how background nodes operate.\r\n\r\n![Ecplipse_17](https://user-images.githubusercontent.com/26142412/90641143-ede23d00-e241-11ea-85b0-316e954c74c7.png)\r\n\r\nImagine there is an exchange. It does not tell anyone which nodes it owns. However, the exchange must compare the results of its nodes in order to credit someone's deposit. If there is a discrepancy between the nodes owned by the exchange, the deposit should be halted until  further investigation.\r\n\r\n![Ecplipse_18](https://user-images.githubusercontent.com/26142412/90641326-28e47080-e242-11ea-8240-e429bc22e651.png)\r\n\r\nNo one knows which nodes of the network are inter-related to each other. There is a rule that it is better to have geographically distanced nodes and compare their results. \r\n\r\nThe exchange may also have 3, 5 or 10 nodes - this is not really that costly compared to a loss of $5,6M due to 51%-attacks.\r\n\r\n## Conclusion\r\n\r\nThe described attack and the described countermeasures are only related to the imperfection of the hardware and network latency. This attacks are not anyhow related to the underlying consensus or changes proposed with this ECIP. As the result - **it is definitely known which chain was correct at which moment of time. While a single node can not rollback the time and objectively decide whether a split was legit or not - it is definitely possible to do so for the owner of this node if he has another node to compare with.** Then the owner can reboot the lagging node and it will be fine again.\r\n\r\nThere is a set of rules that would help the mainnet nodes to stay synced and resist the attack:\r\n\r\n1. Don't trust a single node - it can be isolated or suffer edge case issues.\r\n\r\n2. Have multiple nodes. Compare their state with each other. If you're a poor student then you can whitelist a bootnode and compare your own node with it every X blocks. If you're an operator of the pool or an exchange owner then you are better running a couple of \"background\" nodes rather than losing your mining rewards or crediting wrong deposits due to 51%-attacks.\r\n\r\n3. Don't tell anyone which nodes are yours and how much \"background\" nodes you have.\r\n\r\n4. It is always possible to determine which chain is correct but your node may not be on a correct chain for some [technical] reason. Just halt your operations (something that was not possible in case of 'stealth mining' 51%-attacks ) and wait for the network to stabilize or the attacker to run out of funds maintaining his attack. Then reboot your lagging nodes and let them sync to a correct chain.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/comments/676387082/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }